{"version":3,"sources":["components/googleDirections.js","components/googleDistanceMatrix.js"],"names":["dmx","Component","initialData","routeIndex","routes","status","attributes","map","type","String","default","origin","Object","destination","waypoints","Array","travel-mode","unit-system","departure-time","Date","arrival-time","transit-modes","transit-preference","show-directions","Boolean","provide-alternatives","avoid-ferries","avoid-highways","avoid-tolls","optimize-waypoints","draggable","dynamic-update","methods","route","this","setRouteIndex","index","directions","set","renderer","events","directionschanged","Event","routeindexchanged","render","node","target","document","getElementById","props","dmxComponent","service","google","maps","DirectionsService","DirectionsRenderer","addListener","directionsChanged","bind","routeindexChanged","update","setOptions","JSON","stringify","latitude","longitude","lat","lng","request","getWaypoints","optimizeWaypoints","travelMode","TravelMode","unitSystem","UnitSystem","provideRouteAlternatives","avoidFerries","avoidHighways","avoidTolls","transitOptions","arrivalTime","departureTime","isArray","modes","routingPreference","drivingOptions","updateRoute","split","waypoint","location","getRouteIndex","setTimeout","dispatchEvent","getDirections","copyrights","summary","fare","currency","value","face","totalMeters","legs","reduce","d","leg","distance","totalSeconds","duration","waypointsOrder","waypoint_order","arrivalDate","arrival_time","toISOString","departureDate","departure_time","arrival","text","departure","meters","seconds","start","start_address","end","end_address","steps","step","transit","stop","arrival_stop","name","date","time","departure_stop","headsign","numStops","num_stops","line","instructions","maneuver","travel_mode","setMap","setDirections","setPanel","$node","console","warn","results","origins","destinations","units","getDistance","DistanceMatrixService","getDistanceMatrix","onResponse","response","originAddresses","destinationAddresses","i","length","elements","rows","j","element","push"],"mappings":"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","file":"../dmxGoogleDirections/dmxGoogleDirections.js","sourcesContent":["dmx.Component('google-directions', {\r\n\r\n    initialData: {\r\n        routeIndex: 0,\r\n        routes: [],\r\n        status: ''\r\n    },\r\n\r\n    attributes: {\r\n        map: { // required\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        origin: { // required\r\n            type: [Object, String],\r\n            default: null\r\n        },\r\n\r\n        destination: { // required\r\n            type: [Object, String],\r\n            default: null\r\n        },\r\n\r\n        waypoints: {\r\n            type: [Array, String], // array or | separated string\r\n            default: null\r\n        },\r\n\r\n        'travel-mode': {\r\n            type: String,\r\n            default: 'DRIVING' // DRIVING, WALKING, BICYCLING, TRANSIT\r\n        },\r\n\r\n        'unit-system': {\r\n            type: String,\r\n            default: 'METRIC' // METRIC, IMPERIAL\r\n        },\r\n\r\n        'departure-time': {\r\n            type: Date,\r\n            default: null\r\n        },\r\n\r\n        'arrival-time': {\r\n            type: Date,\r\n            default: null\r\n        },\r\n\r\n        'transit-modes': {\r\n            type: Array,\r\n            default: null // BUS, RAIL, SUBWAY, TRAIN, TRAM\r\n        },\r\n\r\n        'transit-preference': {\r\n            type: String,\r\n            default: null // FEWER_TRANSFERS, LESS_WALKING\r\n        },\r\n\r\n        'show-directions': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'provide-alternatives': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-ferries': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-highways': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-tolls': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'optimize-waypoints': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        draggable: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'dynamic-update': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        route: function() {\r\n            this.route();\r\n        },\r\n\r\n        setRouteIndex: function(index) {\r\n            if (this.directions) {\r\n                this.set('routeIndex', index);\r\n                this.renderer.setRouteIndex(index);\r\n            }\r\n        }\r\n    },\r\n\r\n    events: {\r\n        directionschanged: Event,\r\n        routeindexchanged: Event\r\n    },\r\n\r\n    render: function(node) {\r\n        this.target = document.getElementById(this.props.map);\r\n        this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n\r\n        this.service = new google.maps.DirectionsService();\r\n        this.renderer = new google.maps.DirectionsRenderer({\r\n            draggable: this.props.draggable\r\n        });\r\n\r\n        this.renderer.addListener('directions_changed', this.directionsChanged.bind(this));\r\n        this.renderer.addListener('routeindex_changed', this.routeindexChanged.bind(this));\r\n\r\n        this.route();\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.map && !this.map) {\r\n            this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n        }\r\n\r\n        if (this.props.draggable != props.draggable) {\r\n            this.renderer.setOptions({ draggable: this.props.draggable });\r\n        }\r\n\r\n        if (this.props['dynamic-update']) {\r\n            if (this.props.origin != props.origin || this.props.destination != props.destination || JSON.stringify(this.props.waypoints) != JSON.stringify(props.waypoints)) {\r\n                this.route();\r\n            }\r\n        }\r\n    },\r\n\r\n    route: function() {\r\n        if (!this.props.origin || !this.props.destination) return;\r\n\r\n        var origin = this.props.origin;\r\n        var destination = this.props.destination;\r\n\r\n        if (this.props.origin.latitude && this.props.origin.longitude) {\r\n          origin = { lat: +this.props.origin.latitude, lng: +this.props.origin.longitude };\r\n        }\r\n\r\n        if (this.props.destination.latitude && this.props.destination.longitude) {\r\n          destination = { lat: +this.props.destination.latitude, lng: +this.props.destination.longitude };\r\n        }\r\n\r\n        var request = {\r\n            origin: origin,\r\n            destination: destination,\r\n            waypoints: this.getWaypoints(),\r\n            optimizeWaypoints: this.props['optimize-waypoints'],\r\n            travelMode: google.maps.TravelMode[this.props['travel-mode']],\r\n            unitSystem: google.maps.UnitSystem[this.props['unit-system']],\r\n            provideRouteAlternatives: this.props['provide-alternatives'],\r\n            avoidFerries: this.props['avoid-ferries'],\r\n            avoidHighways: this.props['avoid-highways'],\r\n            avoidTolls: this.props['avoid-tolls']\r\n        };\r\n\r\n        if (this.props['travel-mode'] == 'TRANSIT') {\r\n            request.transitOptions = {};\r\n\r\n            if (this.props['arrival-time']) {\r\n                request.transitOptions.arrivalTime = new Date(this.props['arrival-time']);\r\n            }\r\n\r\n            if (this.props['departure-time']) {\r\n                request.transitOptions.departureTime = new Date(this.props['departure-time']);\r\n            }\r\n\r\n            if (Array.isArray(this.props['transit-modes'])) {\r\n                request.transitOptions.modes = this.props['transit-modes'];\r\n            }\r\n\r\n            if (this.props['transit-preference']) {\r\n                request.transitOptions.routingPreference = this.props['transit-preference'];\r\n            }\r\n        }\r\n\r\n        if (this.props['travel-mode'] == 'DRIVING' && this.props['departure-time']) {\r\n            request.drivingOptions = {};\r\n\r\n            if (this.props['departure-time']) {\r\n                request.drivingOptions.departureTime = new Date(this.props['departure-time']);\r\n            }\r\n        }\r\n\r\n        this.service.route(request, this.updateRoute.bind(this));\r\n    },\r\n\r\n    getWaypoints: function() {\r\n        if (typeof this.props.waypoints == 'string') {\r\n            this.props.waypoints = this.props.waypoints.split(/\\s*\\|\\s*/);\r\n        }\r\n\r\n        if (Array.isArray(this.props.waypoints)) {\r\n            return this.props.waypoints.map(function(waypoint) {\r\n                return { location: waypoint };\r\n            });\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    routeindexChanged: function() {\r\n        this.set('routeIndex', this.renderer.getRouteIndex());\r\n        setTimeout(this.dispatchEvent.bind(this, 'routeindexchanged'), 100);\r\n    },\r\n\r\n    directionsChanged: function() {\r\n        var directions = this.renderer.getDirections();\r\n\r\n        this.set('routes', directions.routes.map(function(route, index) {\r\n            return {\r\n                index: index,\r\n                copyrights: route.copyrights,\r\n                summary: route.summary,\r\n                fare: route.fare ? {\r\n                    currency: route.fare.currency,\r\n                    value: route.face.value\r\n                } : null,\r\n                totalMeters: route.legs.reduce(function(d, leg) {\r\n                    d += (leg.distance && leg.distance.value || 0);\r\n                    return d;\r\n                }, 0),\r\n                totalSeconds: route.legs.reduce(function(d, leg) {\r\n                    d += (leg.duration && leg.duration.value || 0);\r\n                    return d;\r\n                }, 0),\r\n                waypointsOrder: route.waypoint_order,\r\n                legs: route.legs.map(function(leg) {\r\n                    return {\r\n                        arrivalDate: leg.arrival_time && leg.arrival_time.value.toISOString(),\r\n                        departureDate: leg.departure_time && leg.departure_time.value.toISOString(),\r\n                        arrival: leg.arrival_time && leg.arrival_time.text,\r\n                        departure: leg.departure_time && leg.departure_time.text,\r\n                        distance: leg.distance.text,\r\n                        duration: leg.duration.text,\r\n                        meters: leg.distance.value,\r\n                        seconds: leg.duration.value,\r\n                        start: leg.start_address,\r\n                        end: leg.end_address,\r\n                        steps: leg.steps.map(function(step) {\r\n                            var transit = {};\r\n\r\n                            if (step.transit) {\r\n                                transit.arrival = {\r\n                                  stop: step.transit.arrival_stop.name,\r\n                                  date: step.transit.arrival_time.value.toISOString(),\r\n                                  time: step.transit.arrival_time.text\r\n                                };\r\n                                transit.departure = {\r\n                                  stop: step.transit.departure_stop.name,\r\n                                  date: step.transit.departure_time.value.toISOString(),\r\n                                  time: step.transit.departure_time.text\r\n                                };\r\n                                transit.headsign = step.transit.headsign;\r\n                                transit.numStops = step.transit.num_stops;\r\n                                transit.line = step.transit.line;\r\n                            }\r\n\r\n                            return {\r\n                                distance: step.distance.text,\r\n                                duration: step.duration.text,\r\n                                instructions: step.instructions,\r\n                                maneuver: step.maneuver,\r\n                                travelMode: step.travel_mode,\r\n                                transit: transit\r\n                            };\r\n                        })\r\n                    };\r\n                })\r\n            }\r\n        }));\r\n\r\n        setTimeout(this.dispatchEvent.bind(this, 'directionschanged'), 100);\r\n    },\r\n\r\n    updateRoute: function(directions, status) {\r\n        this.set('routeIndex', 0);\r\n        this.set('status', status);\r\n\r\n        if (status == 'OK') {\r\n            this.directions = directions;\r\n            if (this.props.map && this.map) {\r\n                this.renderer.setMap(this.map);\r\n            } else {\r\n                this.renderer.setMap(null)\r\n            }\r\n            this.renderer.setDirections(directions);\r\n\r\n            if (this.props['show-directions']) {\r\n                this.renderer.setPanel(this.$node);\r\n            }\r\n        } else {\r\n            console.warn(directions, status);\r\n            this.directions = null;\r\n            this.set('routes', []);\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.Component('google-distance-matrix', {\r\n\r\n    /*\r\n        result object\r\n        {\r\n            origin: String,\r\n            destination: String,\r\n            distance: String,\r\n            duration: String,\r\n            meters: Number,\r\n            seconds: Number\r\n        }\r\n    */\r\n\r\n    initialData: {\r\n        status: '',\r\n        results: []\r\n    },\r\n\r\n    attributes: {\r\n        origins: {\r\n            type: [Array, String],\r\n            default: null\r\n        },\r\n\r\n        destinations: {\r\n            type: [Array, String],\r\n            default: null\r\n        },\r\n\r\n        'travel-mode': { // DRIVING, TRANSIT, WALKING, BICYCLING\r\n            type: String,\r\n            default: 'DRIVING'\r\n        },\r\n\r\n        units: { // METRIC, IMPERIAL\r\n            type: String,\r\n            default: 'METRIC'\r\n        },\r\n\r\n        'avoid-highways': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-tolls': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        getDistance: function(origin, destination) {\r\n            this.getDistance(origin, destination);\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.service = new google.maps.DistanceMatrixService();\r\n        this.update({});\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.origins != props.origins || this.props.destinations != props.destinations) {\r\n            this.getDistance(this.props.origins, this.props.destinations);\r\n        }\r\n    },\r\n\r\n    getDistance: function(origins, destinations) {\r\n        if (!(origins && destinations)) return;\r\n\r\n        if (typeof origins == 'string') {\r\n            origins = origins.split(/\\s*\\|\\/*/);\r\n        }\r\n\r\n        if (typeof destinations == 'string') {\r\n            destinations = destinations.split(/\\s*\\|\\/*/);\r\n        }\r\n\r\n        this.service.getDistanceMatrix({\r\n            origins: origins,\r\n            destinations: destinations,\r\n            travelMode: this.props['travel-mode'],\r\n            unitSystem: google.maps.UnitSystem[this.props.units],\r\n            avoidHighways: this.props['avoid-highways'],\r\n            avoidTolls: this.props['avoid-tolls']\r\n        }, this.onResponse.bind(this));\r\n    },\r\n\r\n    onResponse: function(response, status) {\r\n        this.set('status', status);\r\n\r\n        if (status == 'OK') {\r\n            var results = [];\r\n            var origins = response.originAddresses;\r\n            var destinations = response.destinationAddresses;\r\n\r\n            for (var i = 0; i < origins.length; i++) {\r\n                var elements = response.rows[i].elements;\r\n\r\n                for (var j = 0; j < elements.length; j++) {\r\n                    var element = elements[j];\r\n\r\n                    results.push({\r\n                        origin: origins[i],\r\n                        destination: destinations[j],\r\n                        distance: element.distance.text,\r\n                        duration: element.duration.text,\r\n                        meters: element.distance.value,\r\n                        seconds: element.duration.value\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.set('results', results);\r\n        }\r\n    }\r\n\r\n});\r\n"]}