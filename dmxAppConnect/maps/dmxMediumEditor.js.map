{"version":3,"sources":["core/base.js","components/mediumEditor.js","extensions/alert.js","extensions/handleSelection.js","extensions/toolbar.js","extensions/toolbarStates.js","extensions/autoList.js"],"names":["MediumEditor","alert","dmx","mediumEditor","extensions","Extension","name","cfg","extend","Button","button","insertButton","aria","undefined","contentDefault","contentFA","classList","attrs","insertHTML","init","prototype","apply","this","arguments","createButton","on","handleClick","bind","getInsertButton","getAria","base","options","document","createElement","content","ariaLabel","add","forEach","className","setAttribute","Object","keys","attr","getEditorOption","innerHTML","event","preventDefault","stopPropagation","topBlockContainer","getFocusedElement","querySelector","insertAdjacentHTML","setSelection","trigger","selection","moveCursor","focus","getExtensionByName","checkState","InsertButton","Component","data","value","attributes","editable","type","Boolean","default","placeholder","String","static","align","buttons","Array","disable-return","disable-double-return","disable-extra-spaces","disable-spellcheck","target-blank","auto-link","auto-list","fontawesome","render","node","$node","mounted","tagName","trim","indexOf","$addBinding","setValue","update","props","JSON","stringify","console","log","destroyEditor","initEditor","updated","editor","set","getContent","setContent","parse","split","buttonLabels","disableReturn","disableDoubleReturn","disableExtraSpaces","spellcheck","targetBlank","autoLink","toolbar","sticky","updateOnEmptySelection","anchorPreview","showWhenToolbarIsVisible","text","hideOnClick","initExtensions","dmxComponent","subscribe","imageDragging","extension","config","hasAttribute","getAttribute","e","warn","destroy","appendChild","getAlertElement","createAlertElement","elm","id","getEditorId","hide","show","message","remove","util","keyCode","LEFT","UP","RIGHT","DOWN","checkSelection","delay","handleEditableKeydown","documentElement","getSelectionStart","offset","getCaretOffsets","getKeyCode","isEmpty","BACKSPACE","left","previousElementSibling","click","test","parentNode","removeChild","figure","getClosestTag","nextElementSibling","ENTER","p","insertBefore","nextSibling","html","replace","fn","setTimeout","call","getEditorElements","element","querySelectorAll","sel","getSelection","rangeCount","range","getRangeAt","getContainerEditorElement","commonAncestorContainer","block","getTopBlockContainer","isMediumEditorElement","allowMultiParagraphSelection","insertDiffLeft","diffLeft","diffTop","firstButtonClass","lastButtonClass","standardizeSelectionStart","stickyTopOffset","relativeContainer","initThrottledMethods","getToolbarElement","getInsertbarElement","forEachExtension","iterator","context","command","createToolbar","createToolbarButtons","hasForm","getForm","attachEventHandlers","li","btn","buttonName","buttonOpts","ul","style","display","addBuiltInExtension","getButton","isElement","length","createInsertbar","insertbar","toggle","handleToggleClick","createInsertbarButtons","getInteractionElements","getToolbarActionsElement","getInsertbarActionsElement","throttledPositionToolbar","throttle","isActive","positionToolbarIfShown","handleBlur","handleFocus","handleEditableClick","handleEditableKeyup","handleDocumentMouseup","window","handleWindowScroll","handleWindowResize","target","isDescendant","clearTimeout","hideTimeout","delayShowTimeout","hideToolbar","hideInsertbar","isInsertbarExpanded","collapseInsertbar","expandInsertbar","isDisplayed","contains","showToolbar","isInsertbarDisplayed","showInsertbar","childNodes","isToolbarDefaultActionsDisplayed","hideToolbarDefaultActions","showToolbarDefaultActions","hideExtensionForms","hideForm","multipleBlockElementsSelected","regexEmptyHTMLTags","regexBlockElements","RegExp","blockContainerElementNames","join","selectionHTML","getSelectionHtml","hasMultiParagraphs","match","modifySelection","selectionRange","startContainer","nodeValue","startOffset","adjacentNode","findAdjacentTextNodeWithContent","getSelectionElement","substr","select","endContainer","endOffset","preventSelectionUpdates","selectionInContentEditableFalse","selectionElement","isCollapsed","showAndUpdateInsertbar","showAndUpdateToolbar","selectionContainsContent","setToolbarButtonStates","setToolbarPosition","setInsertbarPosition","setInactive","checkActiveButtons","manualStateChecks","queryState","getSelectionRange","updateExtensionState","isAlreadyApplied","setActive","queryCommandState","push","getSelectedParentElement","some","container","positionStaticToolbar","positionToolbar","textContent","rect","getBoundingClientRect","top","pageYOffset","Math","max","pageXOffset","targetLeft","scrollTop","body","windowWidth","innerWidth","toolbarElement","containerRect","containerTop","containerCenter","width","toolbarHeight","offsetHeight","toolbarWidth","offsetWidth","halfOffsetWidth","right","ceil","boundary","height","nodeType","middleBoundary","elementsContainerBoundary","containerWidth","buttonHeight","defaultLeft","elementsContainer","elementsContainerAbsolute","getComputedStyle","getPropertyValue","positions","relativeBoundary","key","isNaN","states","headers","nodeName","pendingState","currentState","onPositionToolbar","state","firstButton","lastButton","removeProperty","setProperty","onKeypress","keyPressEvent","isKey","SPACE","list_start","execAction"],"mappings":";;;;;;AAAAA,cACAC,MAAA,0EAGA,WAEAC,IAAAC,gBAEAD,IAAAC,aAAAC,cAEAF,IAAAC,aAAAE,UAAA,SAAAC,EAAAC,GACAA,EAAAD,KAAAA,EACAJ,IAAAC,aAAAC,WAAAE,GAAAN,aAAAK,UAAAG,OAAAD,IAGAL,IAAAC,aAAAM,OAAA,SAAAH,EAAAC,GACAA,EAAAD,KAAAA,EACAJ,IAAAC,aAAAC,WAAAE,GAAAN,aAAAI,WAAAM,OAAAF,OAAAD,IAGAL,IAAAC,aAAAQ,aAAAX,aAAAK,UAAAG,QAEAI,KAAAC,OAEAC,eAAAD,OAEAE,UAAAF,OAEAG,UAAAH,OAEAI,MAAAJ,OAEAK,WAAAL,OAEAM,KAAA,WACAnB,aAAAK,UAAAe,UAAAD,KAAAE,MAAAC,KAAAC,WAEAD,KAAAZ,OAAAY,KAAAE,eACAF,KAAAG,GAAAH,KAAAZ,OAAA,QAAAY,KAAAI,YAAAC,KAAAL,QAGAM,gBAAA,WACA,MAAAN,MAAAZ,QAGAmB,QAAA,WACA,MAAA,kBAAAP,MAAAV,KAAAU,KAAAV,KAAAU,KAAAQ,KAAAC,SAAAT,KAAAV,MAGAY,aAAA,WACA,GAAAd,GAAAY,KAAAU,SAAAC,cAAA,UACAC,EAAAZ,KAAAR,eACAqB,EAAAb,KAAAO,SA4BA,OA1BAnB,GAAAM,UAAAoB,IAAA,kCACA1B,EAAAM,UAAAoB,IAAA,kCAAAd,KAAAhB,MAEAgB,KAAAN,WACAM,KAAAN,UAAAqB,QAAA,SAAAC,GACA5B,EAAAM,UAAAoB,IAAAE,KAIAH,IACAzB,EAAA6B,aAAA,QAAAJ,GACAzB,EAAA6B,aAAA,aAAAJ,IAGAb,KAAAL,OACAuB,OAAAC,KAAAnB,KAAAL,OAAAoB,QAAA,SAAAK,GACAhC,EAAA6B,aAAAG,EAAApB,KAAAL,MAAAyB,KACApB,MAGA,gBAAAA,KAAAqB,gBAAA,iBAAArB,KAAAP,YACAmB,EAAAZ,KAAAP,WAGAL,EAAAkC,UAAAV,EAEAxB,GAGAgB,YAAA,SAAAmB,GAIA,GAHAA,EAAAC,iBACAD,EAAAE,kBAEAzB,KAAAJ,WAAA,CAEA,GAAA8B,GAAA1B,KAAAQ,KAAAmB,oBAAAC,cAAA,6BAEA,mBAAA5B,MAAAJ,WACAI,KAAAJ,WAAA8B,GAEAA,EAAAG,mBAAA,cAAA7B,KAAAJ,YAIAI,KAAA8B,gBAGAA,aAAA,WACA9B,KAAAQ,KAAAuB,QAAA,mBAAA/B,KAAAQ,KAAAmB,qBACAjD,aAAAsD,UAAAC,WAAAjC,KAAAU,SAAAV,KAAAQ,KAAAmB,oBAAAC,cAAA,8BAAA,GACA5B,KAAAQ,KAAAmB,oBAAAO,QACAlC,KAAAQ,KAAA2B,mBAAA,WAAAC,gBAKAxD,IAAAC,aAAAwD,aAAA,SAAArD,EAAAC,GACAA,EAAAD,KAAAA,EACAJ,IAAAC,aAAAC,WAAAE,GAAAJ,IAAAC,aAAAQ,aAAAH,OAAAD,OChHAL,IAAA0D,UAAA,iBAEAC,MACAC,MAAA,IAGAC,YACAC,UACAC,KAAAC,QACAC,SAAA,GAGAC,aACAH,KAAAI,OACAF,QAAA,kBAGAG,QACAL,KAAAC,QACAC,SAAA,GAGAI,OACAN,KAAAI,OACAF,QAAA,UAGAK,SACAP,KAAAQ,MACAN,SAAA,OAAA,SAAA,YAAA,SAAA,KAAA,KAAA,UAIAO,kBACAT,KAAAC,QACAC,SAAA,GAGAQ,yBACAV,KAAAC,QACAC,SAAA,GAGAS,wBACAX,KAAAC,QACAC,SAAA,GAGAU,sBACAZ,KAAAC,QACAC,SAAA,GAGAW,gBACAb,KAAAC,QACAC,SAAA,GAGAY,aACAd,KAAAC,QACAC,SAAA,GAGAa,aACAf,KAAAC,QACAC,SAAA,GAGAc,aACAhB,KAAAC,QACAC,SAAA,GAGAL,OACAG,KAAAI,OACAF,QAAA,OAIAe,OAAA,SAAAC,GACA7D,KAAA8D,MAAAD,GAGAE,QAAA,WACA,GAAAvB,GAAA,YAAAxC,KAAA8D,MAAAE,QAAAhE,KAAA8D,MAAAtB,MAAAyB,OAAAjE,KAAA8D,MAAAxC,UAAA2C,MAEAzB,GAAA0B,QAAA,SAAA,GACAlE,KAAAmE,YAAA3B,EAAAxC,KAAAoE,SAAA/D,KAAAL,OAGAA,KAAAqE,YAGAA,OAAA,SAAAC,GACAC,KAAAC,UAAAF,IAAAC,KAAAC,UAAAxE,KAAAsE,SACAA,EAAA9B,OAAAxC,KAAAsE,MAAA9B,QACAiC,QAAAC,IAAA,QAAAJ,EAAA9B,OACAxC,KAAAoE,SAAApE,KAAAsE,MAAA9B,QAGAxC,KAAA2E,iBAEA,YAAA3E,KAAA8D,MAAAE,SAAAhE,KAAAsE,MAAA5B,WACA1C,KAAA4E,eAKAC,QAAA,WACA,GAAA7E,KAAA8E,OACA9E,KAAA+E,IAAA,QAAA/E,KAAA8E,OAAAE,kBACA,CACA,GAAAxC,GAAA,YAAAxC,KAAA8D,MAAAE,QAAAhE,KAAA8D,MAAAtB,MAAAyB,OAAAjE,KAAA8D,MAAAxC,UAAA2C,MACAjE,MAAA+E,IAAA,QAAAvC,KAIA4B,SAAA,SAAA5B,GACAxC,KAAA8E,OACA9E,KAAA8E,OAAAG,WAAAzC,GACA,YAAAxC,KAAA8D,MAAAE,QACAhE,KAAA8D,MAAAtB,MAAAA,EAEAxC,KAAA8D,MAAAxC,UAAAkB,EAGAxC,KAAA6E,WAGAD,WAAA,WACA,IAAA5E,KAAA8E,OAAA,CACA,GAAA5B,GAAAlD,KAAAsE,MAAApB,OAEA,iBAAA,KAEAA,EADA,KAAAA,EAAA,GACAtE,IAAAsG,MAAAhC,GAEAA,EAAAiC,MAAA,aAIAnF,KAAA8E,OAAA,GAAApG,cAAAsB,KAAA8D,OACAsB,eAAApF,KAAAsE,MAAAX,aAAA,cACA0B,cAAArF,KAAAsE,MAAA,kBACAgB,oBAAAtF,KAAAsE,MAAA,yBACAiB,mBAAAvF,KAAAsE,MAAA,wBACAkB,YAAAxF,KAAAsE,MAAA,sBACAmB,YAAAzF,KAAAsE,MAAA,gBACAoB,SAAA1F,KAAAsE,MAAA,aACAqB,SACA3C,OAAAhD,KAAAsE,MAAAtB,OACA4C,OAAA5F,KAAAsE,MAAAtB,OACAC,MAAAjD,KAAAsE,MAAArB,MACA4C,uBAAA7F,KAAAsE,MAAAtB,OACAE,QAAAA,GAEA4C,eACAC,yBAAA/F,KAAAsE,MAAAtB,QAEAF,aACAkD,KAAAhG,KAAAsE,MAAAxB,YACAmD,aAAA,GAEAnH,WAAAkB,KAAAkG,mBAGAlG,KAAA8E,OAAAqB,aAAAnG,KAEAA,KAAA8E,OAAAsB,UAAA,gBAAApG,KAAA6E,QAAAxE,KAAAL,SAIAkG,eAAA,WACA,GAAApH,IACAuH,iBAGAnF,QAAAC,KAAAvC,IAAAC,aAAAC,YAAAiC,QAAA,SAAA/B,GACA,GAAAsH,GAAA1H,IAAAC,aAAAC,WAAAE,GACAuH,IAEA,KAAA,aAAAvH,GAAAgB,KAAAsE,MAAA,eAIA,WAAAtF,EAAA,CAIA,GAAAgB,KAAA8D,MAAA0C,aAAA,UAAAxH,GACA,IACAuH,EAAA3H,IAAAsG,MAAAlF,KAAA8D,MAAA2C,aAAA,UAAAzH,IACA,MAAA0H,GACAjC,QAAAkC,KAAA,sBAAA3H,GAIAF,EAAAE,GAAA,GAAAsH,GAAAC,KACAvG,KAEA,IAAAkD,GAAAlD,KAAAsE,MAAApB,OAkBA,OAhBA,gBAAA,KAEAA,EADA,KAAAA,EAAA,GACAtE,IAAAsG,MAAAhC,GAEAA,EAAAiC,MAAA,aAIArG,EAAA6G,QAAA,GAAA/G,KAAAC,aAAAC,WAAA6G,SACA3C,OAAAhD,KAAAsE,MAAAtB,OACA4C,OAAA5F,KAAAsE,MAAAtB,OACAC,MAAAjD,KAAAsE,MAAArB,MACA4C,uBAAA7F,KAAAsE,MAAAtB,OACAE,QAAAA,IAGApE,GAGA6F,cAAA,WACA3E,KAAA8E,SACA9E,KAAA8E,OAAA8B,gBACA5G,MAAA8E,WChOAlG,IAAAC,aAAAE,UAAA,SAEAc,KAAA,WACAnB,aAAAK,UAAAe,UAAAD,KAAAE,MAAAC,KAAAC,WAEAD,KAAAqB,gBAAA,qBAAAwF,YAAA7G,KAAA8G,oBAGAC,mBAAA,WACA,GAAAC,GAAAhH,KAAAU,SAAAC,cAAA,MAQA,OANAqG,GAAAC,GAAA,uBAAAjH,KAAAkH,cACAF,EAAAhG,UAAA,8BACAgG,EAAA1F,UAAA,6LAEAtB,KAAAG,GAAA6G,EAAA,QAAAhH,KAAAmH,KAAA9G,KAAAL,OAEAgH,GAGAF,gBAAA,WAKA,MAJA9G,MAAAgH,MACAhH,KAAAgH,IAAAhH,KAAA+G,sBAGA/G,KAAAgH,KAGAI,KAAA,SAAAC,GACA,GAAAL,GAAAhH,KAAA8G,iBACAE,GAAApF,cAAA,UAAAN,UAAA+F,EACAL,EAAAtH,UAAAoB,IAAA,+BAGAqG,KAAA,WACAnH,KAAA8G,kBAAApH,UAAA4H,OAAA,iCCnCA5I,aAAA6I,KAAAC,QAAAC,KAAA,GACA/I,aAAA6I,KAAAC,QAAAE,GAAA,GACAhJ,aAAA6I,KAAAC,QAAAG,MAAA,GACAjJ,aAAA6I,KAAAC,QAAAI,KAAA,GAEAhJ,IAAAC,aAAAE,UAAA,oBAEAc,KAAA,WACAG,KAAAoG,UAAA,QAAApG,KAAA6H,eAAAxH,KAAAL,OACAA,KAAAoG,UAAA,gBAAApG,KAAA8H,MAAA9H,KAAA6H,eAAAxH,KAAAL,QACAA,KAAAoG,UAAA,kBAAApG,KAAA+H,sBAAA1H,KAAAL,OACAA,KAAAoG,UAAA,gBAAApG,KAAA6H,eAAAxH,KAAAL,OACAA,KAAAG,GAAAH,KAAAU,SAAAsH,gBAAA,UAAAhI,KAAA6H,eAAAxH,KAAAL,QAGA+H,sBAAA,SAAAxG,GACA,GAAAsC,GAAAnF,aAAAsD,UAAAiG,kBAAAjI,KAAAU,UACAwH,EAAAxJ,aAAAsD,UAAAmG,gBAAAtE,GACA2D,EAAA9I,aAAA6I,KAAAa,WAAA7G,GACA8G,EAAA,mBAEA,IACAb,GAAA9I,aAAA6I,KAAAC,QAAAc,WACA,IAAAJ,EAAAK,MACA1E,EAAA2E,wBACA,UAAA3E,EAAA2E,uBAAAxE,QAEAH,EAAA2E,uBAAA5G,cAAA,OAAA6G,QACAJ,EAAAK,KAAA7E,EAAAvC,YACAuC,EAAA8E,WAAAC,YAAA/E,GAEAtC,EAAAC,qBACA,IACAgG,GAAA9I,aAAA6I,KAAAC,QAAAc,WACA,OAAAzE,EAAAG,QACA,CACA,GAAA6E,GAAAnK,aAAA6I,KAAAuB,cAAAjF,EAAA,SACAnF,cAAAsD,UAAAC,WAAAjC,KAAAU,SAAAmI,EAAAE,mBAAA,GACAF,EAAAF,WAAAC,YAAAC,GACAtH,EAAAC,qBACA,IACAgG,GAAA9I,aAAA6I,KAAAC,QAAAwB,OACAtK,aAAA6I,KAAAuB,cAAAjF,EAAA,aAAA,EACA,CACA,GAAAoF,GAAAjJ,KAAAU,SAAAC,cAAA,IACAsI,GAAA3H,UAAA,MACA,IAAAuH,GAAAnK,aAAA6I,KAAAuB,cAAAjF,EAAA,SACAgF,GAAAF,WAAAA,WAAAO,aAAAD,EAAAJ,EAAAF,WAAAQ,aACAzK,aAAAsD,UAAAC,WAAAjC,KAAAU,SAAAuI,GACA1H,EAAAC,qBAEA,OAAAqC,EAAAG,SACAwD,GAAA9I,aAAA6I,KAAAC,QAAAE,IACAF,GAAA9I,aAAA6I,KAAAC,QAAAI,MACAJ,GAAA9I,aAAA6I,KAAAC,QAAAC,MACAD,GAAA9I,aAAA6I,KAAAC,QAAAG,OAEAjJ,aAAAsD,UAAAC,WAAAjC,KAAAU,SAAAmD,EAAA8E,WAAA/G,cAAA,gBAIAqD,WAAA,SAAAmE,GACA,MAAA,QAAAV,KAAAU,GACA,cAEAA,GAGApE,WAAA,SAAAoE,GACA,MAAAA,GAAAC,QAAA,iCAAA,IAAAA,QAAA,gBAAA,KAGAvB,MAAA,SAAAwB,GACA,MAAA,YACAC,WAAA,WACAD,EAAAE,KAAAxJ,KAAAC,YACAI,KAAAL,MAAA,KAIA4G,QAAA,WACA5G,KAAAyJ,oBAAA1I,QAAA,SAAA2I,GACAA,EAAAC,iBAAA,8BAAA5I,QAAA,SAAA2I,GACAA,EAAAhK,UAAA4H,OAAA,gCAEAtH,OAGA6H,eAAA,WACA,GAAA+B,GAAA5J,KAAAU,SAAAmJ,cAEA,IAAAD,GAAAA,EAAAE,WAAA,EAAA,CACA,GAAAC,GAAAH,EAAAI,WAAA,GACAlF,EAAApG,aAAA6I,KAAA0C,0BAAAF,EAAAG,wBAEA,IAAApF,EAAA,CACA,GAAAqF,GAAAzL,aAAA6I,KAAA6C,qBAAAL,EAAAG,wBAEApF,GAAA6E,iBAAA,8BAAA5I,QAAA,SAAA8C,GACAA,EAAAnE,UAAA4H,OAAA,+BAGA5I,aAAA6I,KAAA8C,sBAAAF,IACAA,EAAAzK,UAAAoB,IAAA,4BAGA,IAAA+C,GAAAnF,aAAAsD,UAAAiG,kBAAAjI,KAAAU,SACAmD,IAAA,OAAAA,EAAAG,SACAH,EAAAnE,UAAAoB,IAAA,kCC5GAlC,IAAAC,aAAAE,UAAA,WAOAkE,MAAA,SAMAqH,8BAAA,EAKApH,SAAA,OAAA,SAAA,YAAA,SAAA,KAAA,KAAA,SAKAqH,gBAAA,GAKAC,SAAA,EAKAC,SAAA,GAKAC,iBAAA,6BAKAC,gBAAA,4BAMAC,2BAAA,EAMA5H,QAAA,EAOA4C,QAAA,EAKAiF,gBAAA,EAOAhF,wBAAA,EAKAiF,kBAAA,KAEAjL,KAAA,WACAnB,aAAAK,UAAAe,UAAAD,KAAAE,MAAAC,KAAAC,WAEAD,KAAA+K,uBAEA/K,KAAA8K,kBAGA9K,KAAA8K,kBAAAjE,YAAA7G,KAAAgL,qBAFAhL,KAAAqB,gBAAA,qBAAAwF,YAAA7G,KAAAgL,qBAKAhL,KAAAqB,gBAAA,qBAAAwF,YAAA7G,KAAAiL,wBAIAC,iBAAA,SAAAC,EAAAC,GACA,MAAApL,MAAAQ,KAAA1B,WAAAiC,QAAA,SAAAsK,GACA,GAAAA,IAAArL,KAGA,MAAAmL,GAAApL,MAAAqL,GAAApL,KAAAC,YACAD,OAKAsL,cAAA,WACA,GAAA3F,GAAA3F,KAAAU,SAAAC,cAAA,MAwBA,OAtBAgF,GAAAsB,GAAA,yBAAAjH,KAAAkH,cACAvB,EAAA3E,UAAA,wBAEAhB,KAAAgD,OACA2C,EAAA3E,WAAA,kBACAhB,KAAA8K,kBACAnF,EAAA3E,WAAA,kCAEA2E,EAAA3E,WAAA,iCAGA2E,EAAAkB,YAAA7G,KAAAuL,wBAGAvL,KAAAkL,iBAAA,SAAA5E,GACAA,EAAAkF,SACA7F,EAAAkB,YAAAP,EAAAmF,aAIAzL,KAAA0L,sBAEA/F,GAGA4F,qBAAA,WACA,GACAI,GACAC,EACA1I,EACAoD,EACAuF,EACAC,EANAC,EAAA/L,KAAAU,SAAAC,cAAA,KA2CA,OAnCAoL,GAAA9E,GAAA,gCAAAjH,KAAAkH,cACA6E,EAAA/K,UAAA,gCACA+K,EAAAC,MAAAC,QAAA,QAEAjM,KAAAkD,QAAAnC,QAAA,SAAA3B,GACA,gBAAAA,IACAyM,EAAAzM,EACA0M,EAAA,OAEAD,EAAAzM,EAAAJ,KACA8M,EAAA1M,GAKAkH,EAAAtG,KAAAQ,KAAA0L,oBAAAL,EAAAC,GAEAxF,GAAA,kBAAAA,GAAA6F,YACAP,EAAAtF,EAAA6F,UAAAnM,KAAAQ,MACAmL,EAAA3L,KAAAU,SAAAC,cAAA,MACAjC,aAAA6I,KAAA6E,UAAAR,GACAD,EAAA9E,YAAA+E,GAEAD,EAAArK,UAAAsK,EAEAG,EAAAlF,YAAA8E,KAEA3L,MAEAkD,EAAA6I,EAAApC,iBAAA,UACAzG,EAAAmJ,OAAA,IACAnJ,EAAA,GAAAxD,UAAAoB,IAAAd,KAAA0K,kBACAxH,EAAAA,EAAAmJ,OAAA,GAAA3M,UAAAoB,IAAAd,KAAA2K,kBAGAoB,GAGAO,gBAAA,WACA,GAAAC,GAAAvM,KAAAU,SAAAC,cAAA,MAEA4L,GAAAtF,GAAA,2BAAAjH,KAAAkH,cACAqF,EAAAvL,UAAA,yBAEA,IAAAwL,GAAAxM,KAAAU,SAAAC,cAAA,SASA,OARA6L,GAAAxL,UAAA,iCACAwL,EAAAlL,UAAA,eAAAtB,KAAAqB,gBAAA,gBAAA,6BAAA,WAEArB,KAAAG,GAAAqM,EAAA,QAAAxM,KAAAyM,kBAAApM,KAAAL,OAEAuM,EAAA1F,YAAA2F,GACAD,EAAA1F,YAAA7G,KAAA0M,0BAEAH,GAGAG,uBAAA,WACA,GACAf,GAAAC,EAAAtF,EAAAuF,EAAAC,EADAC,EAAA/L,KAAAU,SAAAC,cAAA,KAwBA,OArBAoL,GAAA9E,GAAA,kCAAAjH,KAAAkH,cACA6E,EAAA/K,UAAA,kCAEAE,OAAAC,KAAAvC,IAAAC,aAAAC,YAAAiC,QAAA,SAAA3B,GACAyM,EAAAzM,EACA0M,EAAA,KAEAxF,EAAAtG,KAAAQ,KAAA0L,oBAAAL,EAAAC,GAEAxF,GAAA,kBAAAA,GAAAhG,kBACAsL,EAAAtF,EAAAhG,gBAAAN,KAAAQ,MACAmL,EAAA3L,KAAAU,SAAAC,cAAA,MACAjC,aAAA6I,KAAA6E,UAAAR,GACAD,EAAA9E,YAAA+E,GAEAD,EAAArK,UAAAsK,EAEAG,EAAAlF,YAAA8E,KAEA3L,MAEA+L,GAGAnF,QAAA,WACA5G,KAAA2F,UACA3F,KAAA2F,QAAAgD,YACA3I,KAAA2F,QAAAgD,WAAAC,YAAA5I,KAAA2F,eAEA3F,MAAA2F,SAGA3F,KAAAuM,YACAvM,KAAAuM,UAAA5D,YACA3I,KAAAuM,UAAA5D,WAAAC,YAAA5I,KAAAuM,iBAEAvM,MAAAuM,YAMAI,uBAAA,WACA,OAAA3M,KAAAgL,oBAAAhL,KAAAiL,wBAGAD,kBAAA,WAKA,MAJAhL,MAAA2F,UACA3F,KAAA2F,QAAA3F,KAAAsL,iBAGAtL,KAAA2F,SAGAiH,yBAAA,WACA,MAAA5M,MAAAgL,oBAAApJ,cAAA,mCAGAqJ,oBAAA,WAIA,MAHAjL,MAAAuM,YACAvM,KAAAuM,UAAAvM,KAAAsM,mBAEAtM,KAAAuM,WAGAM,2BAAA,WACA,MAAA7M,MAAAiL,sBAAArJ,cAAA,qCAKAmJ,qBAAA,WAIA/K,KAAA8M,yBAAApO,aAAA6I,KAAAwF,SAAA,WACA/M,KAAAQ,KAAAwM,UACAhN,KAAAiN,0BAEA5M,KAAAL,QAGA0L,oBAAA,WAEA1L,KAAAoG,UAAA,OAAApG,KAAAkN,WAAA7M,KAAAL,OACAA,KAAAoG,UAAA,QAAApG,KAAAmN,YAAA9M,KAAAL,OAGAA,KAAAoG,UAAA,gBAAApG,KAAAoN,oBAAA/M,KAAAL,OACAA,KAAAoG,UAAA,gBAAApG,KAAAqN,oBAAAhN,KAAAL,OAGAA,KAAAG,GAAAH,KAAAU,SAAAsH,gBAAA,UAAAhI,KAAAsN,sBAAAjN,KAAAL,OAGAA,KAAAgD,QAAAhD,KAAA4F,QAEA5F,KAAAG,GAAAH,KAAAuN,OAAA,SAAAvN,KAAAwN,mBAAAnN,KAAAL,OAAA,GAIAA,KAAAG,GAAAH,KAAAuN,OAAA,SAAAvN,KAAAyN,mBAAApN,KAAAL,QAGAwN,mBAAA,WACAxN,KAAAiN,0BAGAQ,mBAAA,WACAzN,KAAA8M,4BAGAQ,sBAAA,SAAA/L,GAEA,QAAAA,IAAAA,EAAAmM,SAAAhP,aAAA6I,KAAAoG,aAAA3N,KAAAgL,oBAAAzJ,EAAAmM,UAAAhP,aAAA6I,KAAAoG,aAAA3N,KAAAiL,sBAAA1J,EAAAmM,cAGA1N,MAAAoC,cAGAgL,oBAAA,WAGA7D,WAAA,WACAvJ,KAAAoC,cACA/B,KAAAL,MAAA,IAGAqN,oBAAA,WACArN,KAAAoC,cAGA8K,WAAA,WAEAU,aAAA5N,KAAA6N,aAIAD,aAAA5N,KAAA8N,kBAGA9N,KAAA6N,YAAAtE,WAAA,WACAvJ,KAAA+N,cACA/N,KAAAgO,iBACA3N,KAAAL,MAAA,IAGAmN,YAAA,WACAnN,KAAAoC,cAGAqK,kBAAA,SAAAlL,GACAA,EAAAC,iBACAD,EAAAE,kBAEAzB,KAAAiO,sBACAjO,KAAAkO,oBAEAlO,KAAAmO,mBAMAC,YAAA,WACA,MAAApO,MAAAgL,oBAAAtL,UAAA2O,SAAA,iCAGAC,YAAA,WACAV,aAAA5N,KAAA6N,aACA7N,KAAAoO,gBACApO,KAAAgL,oBAAAtL,UAAAoB,IAAA,gCACAd,KAAA+B,QAAA,iBAAA/B,KAAAQ,KAAAmB,uBAIAoM,YAAA,WACA/N,KAAAoO,gBACApO,KAAAgL,oBAAAtL,UAAA4H,OAAA,gCACAtH,KAAA+B,QAAA,iBAAA/B,KAAAQ,KAAAmB,uBAIA4M,qBAAA,WACA,MAAAvO,MAAAiL,sBAAAvL,UAAA2O,SAAA,mCAGAG,cAAA,YACAxO,KAAAuO,wBAAAvO,KAAAiL,sBAAArJ,cAAA,oCAAA6M,WAAApC,SACArM,KAAAiL,sBAAAvL,UAAAoB,IAAA,kCACAd,KAAA+B,QAAA,mBAAA/B,KAAAQ,KAAAmB,uBAIAqM,cAAA,WACAhO,KAAAuO,yBACAvO,KAAAkO,oBACAlO,KAAAiL,sBAAAvL,UAAA4H,OAAA,kCACAtH,KAAA+B,QAAA,mBAAA/B,KAAAQ,KAAAmB,uBAIAsM,oBAAA,WACA,MAAAjO,MAAAiL,sBAAAvL,UAAA2O,SAAA,mCAGAF,gBAAA,WACAnO,KAAAiO,wBACAjO,KAAAiL,sBAAAvL,UAAAoB,IAAA,kCACAd,KAAA+B,QAAA,qBAIAmM,kBAAA,WACAlO,KAAAiO,wBACAjO,KAAAiL,sBAAAvL,UAAA4H,OAAA,kCACAtH,KAAA+B,QAAA,uBAIA2M,iCAAA,WACA,MAAA,UAAA1O,KAAA4M,2BAAAZ,MAAAC,SAGA0C,0BAAA,WACA3O,KAAA0O,qCACA1O,KAAA4M,2BAAAZ,MAAAC,QAAA,SAIA2C,0BAAA,WACA5O,KAAA6O,qBAEA7O,KAAA0O,qCACA1O,KAAA4M,2BAAAZ,MAAAC,QAAA,SAKAjM,KAAA8N,iBAAA9N,KAAAQ,KAAAsH,MAAA,WACA9H,KAAAsO,eACAjO,KAAAL,QAGA6O,mBAAA,WAEA7O,KAAAkL,iBAAA,SAAA5E,GACAA,EAAAkF,SAAAlF,EAAA8H,eACA9H,EAAAwI,cAQAC,8BAAA,WACA,GAAAC,GAAA,4BACAC,EAAA,GAAAC,QAAA,KAAAxQ,aAAA6I,KAAA4H,2BAAAC,KAAA,KAAA,UAAA,KACAC,EAAA3Q,aAAAsD,UAAAsN,iBAAAtP,KAAAU,UAAA2I,QAAA2F,EAAA,IACAO,EAAAF,EAAAG,MAAAP,EAEA,SAAAM,GAAAA,EAAAlD,OAAA,GAGAoD,gBAAA,WACA,GAAAzN,GAAAhC,KAAAuN,OAAA1D,eACA6F,EAAA1N,EAAAgI,WAAA,EAkBA,IAAAhK,KAAA4K,2BACA8E,EAAAC,eAAAC,WACAF,EAAAG,cAAAH,EAAAC,eAAAC,UAAAvD,OAAA,CACA,GAAAyD,GAAApR,aAAA6I,KAAAwI,gCAAArR,aAAAsD,UAAAgO,oBAAAhQ,KAAAuN,QAAAmC,EAAAC,eAAA3P,KAAAU,SACA,IAAAoP,EAAA,CAEA,IADA,GAAA5H,GAAA,EACA,IAAA4H,EAAAF,UAAAK,OAAA/H,EAAA,GAAAjE,OAAAoI,QACAnE,GAAA,CAEAwH,GAAAhR,aAAAsD,UAAAkO,OAAAlQ,KAAAU,SAAAoP,EAAA5H,EACAwH,EAAAS,aAAAT,EAAAU,cAKAhO,WAAA,WACA,IAAApC,KAAAQ,KAAA6P,wBAAA,CAMA,IAAArQ,KAAAQ,KAAAmB,qBACAjD,aAAAsD,UAAAsO,gCAAAtQ,KAAAuN,QACA,MAAAvN,MAAA+N,eAAA/N,KAAAgO,eAMA,IAAAuC,GAAA7R,aAAAsD,UAAAgO,oBAAAhQ,KAAAuN,OACA,QAAAgD,GACAvQ,KAAAyJ,oBAAAvF,QAAAqM,MAAA,GACAA,EAAA9J,aAAA,wBACAzG,KAAA+N,eAAA/N,KAAAgO,iBAKAhO,KAAAU,SAAAmJ,eAAA2G,aAAA,oBAAA9H,KAAAhK,aAAA6I,KAAA6C,qBAAA1L,aAAAsD,UAAAiG,kBAAAjI,KAAAU,WAAAY,WACAtB,KAAAyQ,yBAEAzQ,KAAAgO,gBAIAhO,KAAA6F,wBAAA7F,KAAAgD,OACAhD,KAAA0Q,wBAIAhS,aAAAsD,UAAA2O,yBAAA3Q,KAAAU,WACAV,KAAAsK,gCAAA,GAAAtK,KAAA+O,gCACA/O,KAAA+N,kBAGA/N,MAAA0Q,0BAKAA,qBAAA,WACA1Q,KAAAyP,kBACAzP,KAAA4Q,yBACA5Q,KAAA+B,QAAA,qBAAA/B,KAAAQ,KAAAmB,qBACA3B,KAAA4O,4BACA5O,KAAA6Q,sBAGAJ,uBAAA,WACAzQ,KAAAkO,oBACAlO,KAAA+B,QAAA,uBAAA/B,KAAAQ,KAAAmB,qBACA3B,KAAA8Q,wBAGAF,uBAAA,WACA5Q,KAAAkL,iBAAA,SAAA5E,GACA,kBAAAA,GAAA0G,UACA,kBAAA1G,GAAAyK,aACAzK,EAAAyK,gBAIA/Q,KAAAgR,sBAGAA,mBAAA,WACA,GAGArI,GAHAsI,KACAC,EAAA,KACAxB,EAAAhR,aAAAsD,UAAAmP,kBAAAnR,KAAAU,UAEA0Q,EAAA,SAAA9K,GACA,kBAAAA,GAAAlE,WACAkE,EAAAlE,WAAAuG,GACA,kBAAArC,GAAA0G,UACA,kBAAA1G,GAAA+K,kBACA,kBAAA/K,GAAAgL,YACAhL,EAAA0G,YAAA1G,EAAA+K,iBAAA1I,IACArC,EAAAgL,YAKA,IAAA5B,IAKA1P,KAAAkL,iBAAA,SAAA5E,GAEA,MAAA,kBAAAA,GAAAiL,oBACAL,EAAA5K,EAAAiL,oBAGA,OAAAL,QACAA,GAAA,kBAAA5K,GAAAgL,WACAhL,EAAAgL,iBAMAL,GAAAO,KAAAlL,KAGAqC,EAAAjK,aAAAsD,UAAAyP,yBAAA/B,GAGA1P,KAAAyJ,oBAAAiI,KAAA,SAAAhI,GACA,MAAAhL,cAAA6I,KAAAoG,aAAAjE,EAAAf,GAAA,MAMA,KAAAA,IACAsI,EAAAlQ,QAAAqQ,IAGA1S,aAAA6I,KAAA8C,sBAAA1B,KAGAA,EAAAA,EAAAA,YAMAsE,uBAAA,WACAjN,KAAAoO,eACApO,KAAA6Q,sBAIAA,mBAAA,WACA,GAAAc,GAAA3R,KAAAQ,KAAAmB,oBACAK,EAAAhC,KAAAuN,OAAA1D,cAGA,OAAA8H,SAIA3R,KAAAgD,QAAAhB,EAAAwO,cAEAxQ,KAAA8K,oBACA9K,KAAAgD,OACAhD,KAAA4R,sBAAAD,GAEA3R,KAAA6R,gBAAA7P,IAIAhC,KAAA+B,QAAA,uBAAA/B,KAAAQ,KAAAmB,qBAEA3B,KAAAsO,gBAfAtO,MAmBA8Q,qBAAA,WACA,GAAAa,GAAA3R,KAAAQ,KAAAmB,oBACAK,EAAAhC,KAAAuN,OAAA1D,cAEA,KAAA8H,EACA,MAAA3R,KAGA,IAAA0B,GAAAhD,aAAA6I,KAAA6C,qBAAApK,KAAAQ,KAAAiR,2BAEA,IAAAzP,EAAAwO,aAAA,IAAA9O,EAAAoQ,YAAA,CACA,GAAAC,GAAArQ,EAAAsQ,uBAEAhS,MAAAiL,sBAAAe,MAAAiG,IAAAF,EAAAE,IAAAjS,KAAAuN,OAAA2E,YAAA,KACAlS,KAAAiL,sBAAAe,MAAAzD,KAAA4J,KAAAC,IAAAL,EAAAxJ,KAAAvI,KAAAuN,OAAA8E,YAAArS,KAAAuK,eAAA,GAAA,KACAvK,KAAA+B,QAAA,yBAAA/B,KAAAQ,KAAAmB,qBAEA3B,KAAAwO,oBAEAxO,MAAAgO,iBAIA4D,sBAAA,SAAAD,GAEA3R,KAAAgL,oBAAAgB,MAAAzD,KAAA,GAGA,IASA+J,GATAC,EAAAvS,KAAAU,SAAAsH,iBAAAhI,KAAAU,SAAAsH,gBAAAuK,WAAAvS,KAAAU,SAAA8R,KAAAD,UACAE,EAAAzS,KAAAuN,OAAAmF,WACAC,EAAA3S,KAAAgL,oBACA4H,EAAAjB,EAAAK,wBACAa,EAAAD,EAAAX,IAAAM,EACAO,EAAAF,EAAArK,KAAAqK,EAAAG,MAAA,EACAC,EAAAL,EAAAM,aACAC,EAAAP,EAAAQ,YACAC,EAAAF,EAAA,CAqBA,QAlBAlT,KAAA4F,OAEA2M,EAAAM,EAAAlB,EAAAsB,aAAAD,EAAAhT,KAAA6K,iBACA8H,EAAA3G,MAAAiG,IAAAY,EAAAlB,EAAAsB,aAAAD,EAAA,KACAL,EAAAjT,UAAA4H,OAAA,iCAEAiL,EAAAM,EAAAG,EAAAhT,KAAA6K,iBACA8H,EAAAjT,UAAAoB,IAAA,gCACA6R,EAAA3G,MAAAiG,IAAAjS,KAAA6K,gBAAA,OAGA8H,EAAAjT,UAAA4H,OAAA,gCACAqL,EAAA3G,MAAAiG,IAAAY,EAAAG,EAAA,MAGAL,EAAA3G,MAAAiG,IAAAY,EAAAG,EAAA,KAGAhT,KAAAiD,OACA,IAAA,OACAqP,EAAAM,EAAArK,IACA,MAEA,KAAA,QACA+J,EAAAM,EAAAS,MAAAH,CACA,MAEA,KAAA,SACAZ,EAAAQ,EAAAM,EAIAd,EAAA,EACAA,EAAA,EACAA,EAAAY,EAAAT,IACAH,EAAAG,EAAAN,KAAAmB,KAAAJ,GAAA,GAGAP,EAAA3G,MAAAzD,KAAA+J,EAAA,MAGAT,gBAAA,SAAA7P,GAEAhC,KAAAgL,oBAAAgB,MAAAzD,KAAA,IACAvI,KAAAgL,oBAAAgB,MAAAqH,MAAA,SAEA,IAAAtJ,GAAA/H,EAAAgI,WAAA,GACAuJ,EAAAxJ,EAAAiI,0BAGAuB,GAAA,IAAAA,EAAAC,QAAA,IAAAD,EAAAR,OAAAhJ,EAAA4F,iBAAA5F,EAAAoG,gBAGAoD,EADA,IAAAxJ,EAAA4F,eAAA8D,UAAA1J,EAAA4F,eAAA/N,cAAA,OACAmI,EAAA4F,eAAA/N,cAAA,OAAAoQ,wBAEAjI,EAAA4F,eAAAqC,wBAIA,IAWA0B,GAAAC,EAXAC,EAAA5T,KAAAuN,OAAAmF,WACAC,EAAA3S,KAAAgL,oBACAgI,EAAAL,EAAAM,aACAC,EAAAP,EAAAQ,YACAC,EAAAF,EAAA,EACAW,EAAA,GACAC,EAAA9T,KAAAwK,SAAA4I,EACAW,EAAA/T,KAAAqB,gBAAA,qBACA2S,GAAA,WAAA,SAAA9P,QAAAqJ,OAAA0G,iBAAAF,GAAAG,iBAAA,cAAA,EACAC,KACAC,IAIAJ,IACAL,EAAAI,EAAA/B,yBACA,MAAA,QAAAjR,QAAA,SAAAsT,GACAD,EAAAC,GAAAd,EAAAc,GAAAV,EAAAU,KAGAD,EAAArB,MAAAQ,EAAAR,MACAqB,EAAAZ,OAAAD,EAAAC,OACAD,EAAAa,EAEAR,EAAAD,EAAAZ,MAGAoB,EAAAlC,IAAA8B,EAAAxB,WAGA4B,EAAAlC,IAAAjS,KAAAuN,OAAA2E,YAGAwB,EAAAH,EAAAhL,KAAAgL,EAAAR,MAAA,EACAoB,EAAAlC,KAAAsB,EAAAtB,IAAAe,EAEAO,EAAAtB,IAAA4B,GACAlB,EAAAjT,UAAAoB,IAAA,6BACA6R,EAAAjT,UAAA4H,OAAA,8BACA6M,EAAAlC,KAAA4B,EAAAN,EAAAC,OAAAxT,KAAAyK,UAEAkI,EAAAjT,UAAAoB,IAAA,8BACA6R,EAAAjT,UAAA4H,OAAA,6BACA6M,EAAAlC,KAAAjS,KAAAyK,SAGAiJ,EAAAN,GACAe,EAAA5L,KAAAuL,EAAAV,EACAe,EAAAd,MAAA,WACAO,EAAAF,EAAAN,GACAe,EAAA5L,KAAA,OACA4L,EAAAd,MAAA,IAEAc,EAAA5L,KAAAuL,EAAAJ,EACAS,EAAAd,MAAA,YAGA,MAAA,OAAA,SAAAtS,QAAA,SAAAsT,GACA1B,EAAA3G,MAAAqI,GAAAF,EAAAE,IAAAC,MAAAH,EAAAE,IAAA,GAAA,WCxzBAzV,IAAAC,aAAA0V,QACAC,SACAtR,SAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MACAd,WAAA,SAAAyB,GACA,OAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAAK,QAAAL,EAAA4Q,YAAA,KAKA7V,IAAAC,aAAAE,UAAA,kBAEA2V,aAAA,KAEAC,aAAA,KAEA9U,KAAA,WACAnB,aAAAK,UAAAe,UAAAD,KAAAE,MAAAC,KAAAC,WAEAD,KAAAoG,UAAA,kBAAApG,KAAA4U,kBAAAvU,KAAAL,QAGAoC,WAAA,SAAAyB,GACA7D,KAAA0U,cACAxT,OAAAC,KAAAvC,IAAAC,aAAA0V,QAAAxT,QAAA,SAAA/B,GACA,GAAA6V,GAAAjW,IAAAC,aAAA0V,OAAAvV,EACA6V,GAAAzS,WAAAyB,KACA7D,KAAA0U,aAAAG,IAEA7U,MAGAtB,aAAA6I,KAAA8C,sBAAAxG,KACA7D,KAAA2U,aAAA3U,KAAA0U,aACA1U,KAAA0U,aAAA,OAIAE,kBAAA,WACA,GAAAE,GAAAC,EACApP,EAAA3F,KAAAQ,KAAA2B,mBAAA,WACA0S,EAAA7U,KAAA2U,eAAAzR,QAAAyC,EAAAzC,QAEAyC,GAAAuF,iBAAA,SAAA5E,GACA,GAAA,kBAAAA,GAAA6F,UAAA,CACA,GAAA/M,GAAAkH,EAAA6F,WAEA0I,GAAA3R,QAAAgB,QAAAoC,EAAAtH,QAAA,GACAI,EAAA4M,MAAAgJ,eAAA,WACAF,EAAAA,GAAA1V,EACA2V,EAAA3V,GAEAA,EAAA4M,MAAAiJ,YAAA,UAAA,QAGA7V,EAAAM,UAAA4H,OAAA3B,EAAA+E,kBACAtL,EAAAM,UAAA4H,OAAA3B,EAAAgF,oBAIAmK,GAAAC,IACAD,EAAApV,UAAAoB,IAAA6E,EAAA+E,kBACAqK,EAAArV,UAAAoB,IAAA6E,EAAAgF,qBC7DA/L,IAAAC,aAAAE,UAAA,aAEAc,KAAA,WACAnB,aAAAK,UAAAe,UAAAD,KAAAE,MAAAC,KAAAC,WAEAD,KAAAoG,UAAA,mBAAApG,KAAAkV,WAAA7U,KAAAL,QAGAkV,WAAA,SAAAC,GACA,GAAAzW,aAAA6I,KAAA6N,MAAAD,GAAAzW,aAAA6I,KAAAC,QAAA6N,QAAA,CACA,GAAAC,GAAAtV,KAAAQ,KAAAiR,2BAAAK,WAEA,OAAAwD,GAAA,KAAAA,IACAtV,KAAAQ,KAAA+U,WAAA,KAAAD,EAAA,sBAAA,qBACAtV,KAAAQ,KAAAiR,2BAAAK,YAAA,GACAqD,EAAA3T","file":"../dmxMediumEditor/dmxMediumEditor.js","sourcesContent":["if (!MediumEditor) {\r\n    alert('Please insert medium-editor.js before dmxMediumEditor.js on your page.');\r\n}\r\n\r\n(function() {\r\n\r\ndmx.mediumEditor = {};\r\n\r\ndmx.mediumEditor.extensions = {};\r\n\r\ndmx.mediumEditor.Extension = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.Extension.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.Button = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.extensions.button.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.insertButton = MediumEditor.Extension.extend({\r\n\r\n    aria: undefined,\r\n\r\n    contentDefault: undefined,\r\n\r\n    contentFA: undefined,\r\n\r\n    classList: undefined,\r\n\r\n    attrs: undefined,\r\n\r\n    insertHTML: undefined,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.button = this.createButton();\r\n        this.on(this.button, 'click', this.handleClick.bind(this));\r\n    },\r\n\r\n    getInsertButton: function() {\r\n        return this.button;\r\n    },\r\n\r\n    getAria: function() {\r\n        return (typeof this.aria === 'function') ? this.aria(this.base.options) : this.aria;\r\n    },\r\n\r\n    createButton: function() {\r\n        var button = this.document.createElement('button'),\r\n            content = this.contentDefault,\r\n            ariaLabel = this.getAria();\r\n\r\n        button.classList.add('medium-editor-insertbar-action');\r\n        button.classList.add('medium-editor-insertbar-action-' + this.name);\r\n\r\n        if (this.classList) {\r\n            this.classList.forEach(function(className) {\r\n                button.classList.add(className);\r\n            });\r\n        }\r\n\r\n        if (ariaLabel) {\r\n            button.setAttribute('title', ariaLabel);\r\n            button.setAttribute('aria-label', ariaLabel);\r\n        }\r\n\r\n        if (this.attrs) {\r\n            Object.keys(this.attrs).forEach(function(attr) {\r\n                button.setAttribute(attr, this.attrs[attr]);\r\n            }, this);\r\n        }\r\n\r\n        if (this.getEditorOption('buttonLabels') === 'fontawesome' && this.contentFA) {\r\n            content = this.contentFA;\r\n        }\r\n\r\n        button.innerHTML = content;\r\n\r\n        return button;\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.insertHTML) {\r\n            //var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n            var topBlockContainer = this.base.getFocusedElement().querySelector('.medium-editor-is-selected');\r\n\r\n            if (typeof this.insertHTML === 'function') {\r\n                this.insertHTML(topBlockContainer);\r\n            } else {\r\n                topBlockContainer.insertAdjacentHTML('beforebegin', this.insertHTML);\r\n            }\r\n        }\r\n\r\n        this.setSelection();\r\n    },\r\n\r\n    setSelection: function() {\r\n        this.base.trigger('editableInput', {}, this.base.getFocusedElement());\r\n        MediumEditor.selection.moveCursor(this.document, this.base.getFocusedElement().querySelector('.medium-editor-is-selected'), 0);\r\n        this.base.getFocusedElement().focus();\r\n        this.base.getExtensionByName('toolbar').checkState();\r\n    }\r\n\r\n});\r\n\r\ndmx.mediumEditor.InsertButton = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = dmx.mediumEditor.insertButton.extend(cfg);\r\n};\r\n\r\n})();\r\n","dmx.Component('medium-editor', {\r\n\r\n    data: {\r\n        value: ''\r\n    },\r\n\r\n    attributes: {\r\n        editable: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        placeholder: {\r\n            type: String,\r\n            default: 'Type your text'\r\n        },\r\n\r\n        static: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        align: {\r\n            type: String,\r\n            default: 'center' // left|center|right\r\n        },\r\n\r\n        buttons: {\r\n            type: Array,\r\n            default: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote']\r\n            // bold|italic|underline|strikethrough|subscript|superscript|anchor|image|quote|pre|orderedlist|unorderedlist|indent|outdent|justifyLeft|justifyCenter|justifyRight|justifyFull|h1|h2|h3|h4|h5|h6|removeFormat|html\r\n        },\r\n\r\n        'disable-return': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-double-return': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-extra-spaces': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-spellcheck': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'target-blank': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'auto-link': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'auto-list': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        fontawesome: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        value: {\r\n            type: String,\r\n            default: null\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = node;\r\n    },\r\n\r\n    mounted: function() {\r\n        var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n\r\n        if (value.indexOf('{{') !== -1) {\r\n            this.$addBinding(value, this.setValue.bind(this));\r\n        }\r\n\r\n        this.update({});\r\n    },\r\n\r\n    update: function(props) {\r\n        if (JSON.stringify(props) != JSON.stringify(this.props)) {\r\n            if (props.value != this.props.value) {\r\n                console.log('value', props.value);\r\n                this.setValue(this.props.value);\r\n            }\r\n\r\n            this.destroyEditor();\r\n\r\n            if (this.$node.tagName == 'TEXTAREA' || this.props.editable) {\r\n                this.initEditor();\r\n            }\r\n        }\r\n    },\r\n\r\n    updated: function() {\r\n        if (this.editor) {\r\n            this.set('value', this.editor.getContent());\r\n        } else {\r\n            var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n            this.set('value', value);\r\n        }\r\n    },\r\n\r\n    setValue: function(value) {\r\n        if (this.editor) {\r\n            this.editor.setContent(value);\r\n        } else if (this.$node.tagName == 'TEXTAREA') {\r\n            this.$node.value = value;\r\n        } else {\r\n            this.$node.innerHTML = value;\r\n        }\r\n\r\n        this.updated();\r\n    },\r\n\r\n    initEditor: function() {\r\n        if (!this.editor) {\r\n            var buttons = this.props.buttons;\r\n\r\n            if (typeof(buttons) == 'string') {\r\n                if (buttons[0] == '[') {\r\n                    buttons = dmx.parse(buttons);\r\n                } else {\r\n                    buttons = buttons.split(/\\s*,\\s*/g);\r\n                }\r\n            }\r\n\r\n            this.editor = new MediumEditor(this.$node, {\r\n                buttonLabels: this.props.fontawesome ? 'fontawesome' : false,\r\n                disableReturn: this.props['disable-return'],\r\n                disableDoubleReturn: this.props['disable-double-return'],\r\n                disableExtraSpaces: this.props['disable-extra-spaces'],\r\n                spellcheck: !this.props['disable-spellcheck'],\r\n                targetBlank: this.props['target-blank'],\r\n                autoLink: this.props['auto-link'],\r\n                toolbar: {\r\n                    static: this.props.static,\r\n                    sticky: this.props.static,\r\n                    align: this.props.align,\r\n                    updateOnEmptySelection: this.props.static,\r\n                    buttons: buttons\r\n                },\r\n                anchorPreview: {\r\n                    showWhenToolbarIsVisible: this.props.static\r\n                },\r\n                placeholder: {\r\n                    text: this.props.placeholder,\r\n                    hideOnClick: false\r\n                },\r\n                extensions: this.initExtensions()\r\n            });\r\n\r\n            this.editor.dmxComponent = this;\r\n\r\n            this.editor.subscribe('editableInput', this.updated.bind(this));\r\n        }\r\n    },\r\n\r\n    initExtensions: function() {\r\n        var extensions = {\r\n            imageDragging: {}\r\n        };\r\n\r\n        Object.keys(dmx.mediumEditor.extensions).forEach(function(name) {\r\n            var extension = dmx.mediumEditor.extensions[name];\r\n            var config = {};\r\n\r\n            if (name == 'auto-list' && !this.props['auto-list']) {\r\n                return;\r\n            }\r\n\r\n            if (name == 'toolbar') {\r\n                return\r\n            }\r\n\r\n            if (this.$node.hasAttribute('medium:' + name)) {\r\n                try {\r\n                    config = dmx.parse(this.$node.getAttribute('medium:' + name));\r\n                } catch (e) {\r\n                    console.warn('Invalid config for ' + name);\r\n                }\r\n            }\r\n\r\n            extensions[name] = new extension(config);\r\n        }, this);\r\n\r\n        var buttons = this.props.buttons;\r\n\r\n        if (typeof(buttons) == 'string') {\r\n            if (buttons[0] == '[') {\r\n                buttons = dmx.parse(buttons);\r\n            } else {\r\n                buttons = buttons.split(/\\s*,\\s*/g);\r\n            }\r\n        }\r\n\r\n        extensions.toolbar = new dmx.mediumEditor.extensions.toolbar({\r\n            static: this.props.static,\r\n            sticky: this.props.static,\r\n            align: this.props.align,\r\n            updateOnEmptySelection: this.props.static,\r\n            buttons: buttons\r\n        })\r\n\r\n        return extensions;\r\n    },\r\n\r\n    destroyEditor: function() {\r\n        if (this.editor) {\r\n            this.editor.destroy();\r\n            delete this.editor;\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('alert', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getAlertElement());\r\n    },\r\n\r\n    createAlertElement: function() {\r\n        var elm = this.document.createElement('div');\r\n\r\n        elm.id = 'medium-editor-alert-' + this.getEditorId();\r\n        elm.className = 'medium-editor-alert-overlay';\r\n        elm.innerHTML = '<div class=\"medium-editor-toolbar medium-editor-toolbar-active medium-editor-alert\"><ul><li><button class=\"medium-editor-button-first medium-editor-button-last\"></button></li></ul></div>';\r\n\r\n        this.on(elm, 'click', this.hide.bind(this));\r\n\r\n        return elm;\r\n    },\r\n\r\n    getAlertElement: function () {\r\n        if (!this.elm) {\r\n            this.elm = this.createAlertElement();\r\n        }\r\n\r\n        return this.elm;\r\n    },\r\n\r\n    show: function(message) {\r\n        var elm = this.getAlertElement();\r\n        elm.querySelector('button').innerHTML = message;\r\n        elm.classList.add('medium-editor-alert-active');\r\n    },\r\n\r\n    hide: function() {\r\n        this.getAlertElement().classList.remove('medium-editor-alert-active');\r\n    }\r\n\r\n});\r\n","MediumEditor.util.keyCode.LEFT = 37;\r\nMediumEditor.util.keyCode.UP = 38;\r\nMediumEditor.util.keyCode.RIGHT = 39;\r\nMediumEditor.util.keyCode.DOWN = 40;\r\n\r\ndmx.mediumEditor.Extension('handle-selection', {\r\n\r\n    init: function () {\r\n        this.subscribe('focus', this.checkSelection.bind(this));\r\n        this.subscribe('editableClick', this.delay(this.checkSelection.bind(this)));\r\n        this.subscribe('editableKeydown', this.handleEditableKeydown.bind(this));\r\n        this.subscribe('editableKeyup', this.checkSelection.bind(this));\r\n        this.on(this.document.documentElement, 'mouseup', this.checkSelection.bind(this));\r\n    },\r\n\r\n    handleEditableKeydown: function (event) {\r\n        var node = MediumEditor.selection.getSelectionStart(this.document);\r\n        var offset = MediumEditor.selection.getCaretOffsets(node);\r\n        var keyCode = MediumEditor.util.getKeyCode(event);\r\n        var isEmpty = /^(\\s+|<br\\/?>)?$/i;\r\n\r\n        if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            offset.left === 0 &&\r\n            node.previousElementSibling &&\r\n            node.previousElementSibling.tagName == 'FIGURE'\r\n        ) {\r\n            node.previousElementSibling.querySelector('img').click();\r\n            if (isEmpty.test(node.innerHTML)) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            node.tagName == 'IMG'\r\n        ) {\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            MediumEditor.selection.moveCursor(this.document, figure.nextElementSibling, 0);\r\n            figure.parentNode.removeChild(figure);\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.ENTER &&\r\n            MediumEditor.util.getClosestTag(node, 'figure') !== false\r\n        ) {\r\n            var p = this.document.createElement('p');\r\n            p.innerHTML = '<br>';\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            figure.parentNode.parentNode.insertBefore(p, figure.parentNode.nextSibling);\r\n            MediumEditor.selection.moveCursor(this.document, p);\r\n            event.preventDefault();\r\n        } else if (\r\n            node.tagName == 'IMG' &&\r\n            (keyCode == MediumEditor.util.keyCode.UP ||\r\n            keyCode == MediumEditor.util.keyCode.DOWN ||\r\n            keyCode == MediumEditor.util.keyCode.LEFT ||\r\n            keyCode == MediumEditor.util.keyCode.RIGHT)\r\n        ) {\r\n            MediumEditor.selection.moveCursor(this.document, node.parentNode.querySelector('figcaption'));\r\n        }\r\n    },\r\n\r\n    setContent: function (html) {\r\n        if (/^\\s*$/.test(html)) {\r\n            return '<p><br></p>';\r\n        }\r\n        return html;\r\n    },\r\n\r\n    getContent: function (html) {\r\n        return html.replace(/medium\\-editor\\-is\\-selected/gi, '').replace(/class=\"\\s*\"/gi, '');\r\n    },\r\n\r\n    delay: function (fn) {\r\n        return function() {\r\n            setTimeout(function() {\r\n                fn.call(this, arguments);\r\n            }.bind(this), 0);\r\n        }\r\n    },\r\n\r\n    destroy: function() {\r\n        this.getEditorElements().forEach(function(element) {\r\n            element.querySelectorAll('.medium-editor-is-selected').forEach(function(element) {\r\n                element.classList.remove('medium-editor-is-selected');\r\n            });\r\n        }, this);\r\n    },\r\n\r\n    checkSelection: function () {\r\n        var sel = this.document.getSelection();\r\n\r\n        if (sel && sel.rangeCount > 0) {\r\n            var range = sel.getRangeAt(0);\r\n            var editor = MediumEditor.util.getContainerEditorElement(range.commonAncestorContainer)\r\n\r\n            if (editor) {\r\n                var block = MediumEditor.util.getTopBlockContainer(range.commonAncestorContainer);\r\n\r\n                editor.querySelectorAll('.medium-editor-is-selected').forEach(function(node) {\r\n                    node.classList.remove('medium-editor-is-selected');\r\n                });\r\n\r\n                if (!MediumEditor.util.isMediumEditorElement(block)) {\r\n                    block.classList.add('medium-editor-is-selected');\r\n                }\r\n\r\n                var node = MediumEditor.selection.getSelectionStart(this.document);\r\n                if (node && node.tagName == 'IMG') {\r\n                    node.classList.add('medium-editor-is-selected');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('toolbar', {\r\n    /* Toolbar Options */\r\n\r\n    /* align: ['left'|'center'|'right']\r\n     * When the __static__ option is true, this aligns the static toolbar\r\n     * relative to the medium-editor element.\r\n     */\r\n    align: 'center',\r\n\r\n    /* allowMultiParagraphSelection: [boolean]\r\n     * enables/disables whether the toolbar should be displayed when\r\n     * selecting multiple paragraphs/block elements\r\n     */\r\n    allowMultiParagraphSelection: true,\r\n\r\n    /* buttons: [Array]\r\n     * the names of the set of buttons to display on the toolbar.\r\n     */\r\n    buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\r\n\r\n    /* insertDiffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the insertbar.\r\n     */\r\n    insertDiffLeft: -45,\r\n\r\n    /* diffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the toolbar.\r\n     */\r\n    diffLeft: 0,\r\n\r\n    /* diffTop: [Number]\r\n     * value in pixels to be added to the Y axis positioning of the toolbar.\r\n     */\r\n    diffTop: -10,\r\n\r\n    /* firstButtonClass: [string]\r\n     * CSS class added to the first button in the toolbar.\r\n     */\r\n    firstButtonClass: 'medium-editor-button-first',\r\n\r\n    /* lastButtonClass: [string]\r\n     * CSS class added to the last button in the toolbar.\r\n     */\r\n    lastButtonClass: 'medium-editor-button-last',\r\n\r\n    /* standardizeSelectionStart: [boolean]\r\n     * enables/disables standardizing how the beginning of a range is decided\r\n     * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\r\n     */\r\n    standardizeSelectionStart: false,\r\n\r\n    /* static: [boolean]\r\n     * enable/disable the toolbar always displaying in the same location\r\n     * relative to the medium-editor element.\r\n     */\r\n    static: false,\r\n\r\n    /* sticky: [boolean]\r\n     * When the __static__ option is true, this enables/disables the toolbar\r\n     * \"sticking\" to the viewport and staying visible on the screen while\r\n     * the page scrolls.\r\n     */\r\n    sticky: false,\r\n\r\n    /* stickyTopOffset: [Number]\r\n     * Value in pixel of the top offset above the toolbar\r\n     */\r\n    stickyTopOffset: 0,\r\n\r\n    /* updateOnEmptySelection: [boolean]\r\n     * When the __static__ option is true, this enables/disables updating\r\n     * the state of the toolbar buttons even when the selection is collapsed\r\n     * (there is no selection, just a cursor).\r\n     */\r\n    updateOnEmptySelection: false,\r\n\r\n    /* relativeContainer: [node]\r\n     * appending the toolbar to a given node instead of body\r\n     */\r\n    relativeContainer: null,\r\n\r\n    init: function () {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.initThrottledMethods();\r\n\r\n        if (!this.relativeContainer) {\r\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\r\n        } else {\r\n            this.relativeContainer.appendChild(this.getToolbarElement());\r\n        }\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getInsertbarElement());\r\n    },\r\n\r\n    // Helper method to execute method for every extension, but ignoring the toolbar extension\r\n    forEachExtension: function (iterator, context) {\r\n        return this.base.extensions.forEach(function (command) {\r\n            if (command === this) {\r\n                return;\r\n            }\r\n            return iterator.apply(context || this, arguments);\r\n        }, this);\r\n    },\r\n\r\n    // Toolbar creation/deletion\r\n\r\n    createToolbar: function () {\r\n        var toolbar = this.document.createElement('div');\r\n\r\n        toolbar.id = 'medium-editor-toolbar-' + this.getEditorId();\r\n        toolbar.className = 'medium-editor-toolbar';\r\n\r\n        if (this.static) {\r\n            toolbar.className += ' static-toolbar';\r\n        } else if (this.relativeContainer) {\r\n            toolbar.className += ' medium-editor-relative-toolbar';\r\n        } else {\r\n            toolbar.className += ' medium-editor-stalker-toolbar';\r\n        }\r\n\r\n        toolbar.appendChild(this.createToolbarButtons());\r\n\r\n        // Add any forms that extensions may have\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm) {\r\n                toolbar.appendChild(extension.getForm());\r\n            }\r\n        });\r\n\r\n        this.attachEventHandlers();\r\n\r\n        return toolbar;\r\n    },\r\n\r\n    createToolbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li,\r\n            btn,\r\n            buttons,\r\n            extension,\r\n            buttonName,\r\n            buttonOpts;\r\n\r\n        ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-toolbar-actions';\r\n        ul.style.display = 'block';\r\n\r\n        this.buttons.forEach(function (button) {\r\n            if (typeof button === 'string') {\r\n                buttonName = button;\r\n                buttonOpts = null;\r\n            } else {\r\n                buttonName = button.name;\r\n                buttonOpts = button;\r\n            }\r\n\r\n            // If the button already exists as an extension, it'll be returned\r\n            // othwerise it'll create the default built-in button\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getButton === 'function') {\r\n                btn = extension.getButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        buttons = ul.querySelectorAll('button');\r\n        if (buttons.length > 0) {\r\n            buttons[0].classList.add(this.firstButtonClass);\r\n            buttons[buttons.length - 1].classList.add(this.lastButtonClass);\r\n        }\r\n\r\n        return ul;\r\n    },\r\n\r\n    createInsertbar: function () {\r\n        var insertbar = this.document.createElement('div');\r\n\r\n        insertbar.id = 'medium-editor-insertbar-' + this.getEditorId();\r\n        insertbar.className = 'medium-editor-insertbar';\r\n\r\n        var toggle = this.document.createElement('button');\r\n        toggle.className = 'medium-editor-insertbar-toggle';\r\n        toggle.innerHTML = this.getEditorOption('buttonLabels') == 'fontawesome' ? '<i class=\"fa fa-plus\"></i>' : '<b>+</b>';\r\n\r\n        this.on(toggle, 'click', this.handleToggleClick.bind(this));\r\n\r\n        insertbar.appendChild(toggle);\r\n        insertbar.appendChild(this.createInsertbarButtons());\r\n\r\n        return insertbar;\r\n    },\r\n\r\n    createInsertbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li, btn, buttons, extension, buttonName, buttonOpts;\r\n\r\n        ul.id = 'medium-editor-insertbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-insertbar-actions';\r\n\r\n        Object.keys(dmx.mediumEditor.extensions).forEach(function (button) {\r\n            buttonName = button;\r\n            buttonOpts = null;\r\n\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getInsertButton === 'function') {\r\n                btn = extension.getInsertButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        return ul;\r\n    },\r\n\r\n    destroy: function () {\r\n        if (this.toolbar) {\r\n            if (this.toolbar.parentNode) {\r\n                this.toolbar.parentNode.removeChild(this.toolbar);\r\n            }\r\n            delete this.toolbar;\r\n        }\r\n\r\n        if (this.insertbar) {\r\n            if (this.insertbar.parentNode) {\r\n                this.insertbar.parentNode.removeChild(this.insertbar);\r\n            }\r\n            delete this.insertbar;\r\n        }\r\n    },\r\n\r\n    // Toolbar accessors\r\n\r\n    getInteractionElements: function () {\r\n        return [this.getToolbarElement(), this.getInsertbarElement()];\r\n    },\r\n\r\n    getToolbarElement: function () {\r\n        if (!this.toolbar) {\r\n            this.toolbar = this.createToolbar();\r\n        }\r\n\r\n        return this.toolbar;\r\n    },\r\n\r\n    getToolbarActionsElement: function () {\r\n        return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\r\n    },\r\n\r\n    getInsertbarElement: function () {\r\n        if (!this.insertbar) {\r\n            this.insertbar = this.createInsertbar();\r\n        }\r\n        return this.insertbar;\r\n    },\r\n\r\n    getInsertbarActionsElement: function () {\r\n        return this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions');\r\n    },\r\n\r\n    // Toolbar event handlers\r\n\r\n    initThrottledMethods: function () {\r\n        // throttledPositionToolbar is throttled because:\r\n        // - It will be called when the browser is resizing, which can fire many times very quickly\r\n        // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\r\n        this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\r\n            if (this.base.isActive) {\r\n                this.positionToolbarIfShown();\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    attachEventHandlers: function () {\r\n        // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\r\n        this.subscribe('blur', this.handleBlur.bind(this));\r\n        this.subscribe('focus', this.handleFocus.bind(this));\r\n\r\n        // Updating the state of the toolbar as things change\r\n        this.subscribe('editableClick', this.handleEditableClick.bind(this));\r\n        this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\r\n\r\n        // Handle mouseup on document for updating the selection in the toolbar\r\n        this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\r\n\r\n        // Add a scroll event for sticky toolbar\r\n        if (this.static && this.sticky) {\r\n            // On scroll (capture), re-position the toolbar\r\n            this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\r\n        }\r\n\r\n        // On resize, re-position the toolbar\r\n        this.on(this.window, 'resize', this.handleWindowResize.bind(this));\r\n    },\r\n\r\n    handleWindowScroll: function () {\r\n        this.positionToolbarIfShown();\r\n    },\r\n\r\n    handleWindowResize: function () {\r\n        this.throttledPositionToolbar();\r\n    },\r\n\r\n    handleDocumentMouseup: function (event) {\r\n        // Do not trigger checkState when mouseup fires over the toolbar\r\n        if (event && event.target && (MediumEditor.util.isDescendant(this.getToolbarElement(), event.target) || MediumEditor.util.isDescendant(this.getInsertbarElement(), event.target))) {\r\n            return false;\r\n        }\r\n        this.checkState();\r\n    },\r\n\r\n    handleEditableClick: function () {\r\n        // Delay the call to checkState to handle bug where selection is empty\r\n        // immediately after clicking inside a pre-existing selection\r\n        setTimeout(function () {\r\n            this.checkState();\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    handleEditableKeyup: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleBlur: function () {\r\n        // Kill any previously delayed calls to hide the toolbar\r\n        clearTimeout(this.hideTimeout);\r\n\r\n        // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\r\n        // calls from happening in this specific case\r\n        clearTimeout(this.delayShowTimeout);\r\n\r\n        // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\r\n        this.hideTimeout = setTimeout(function () {\r\n            this.hideToolbar();\r\n            this.hideInsertbar();\r\n        }.bind(this), 1);\r\n    },\r\n\r\n    handleFocus: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleToggleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.isInsertbarExpanded()) {\r\n            this.collapseInsertbar();\r\n        } else {\r\n            this.expandInsertbar();\r\n        }\r\n    },\r\n\r\n    // Hiding/showing toolbar\r\n\r\n    isDisplayed: function () {\r\n        return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\r\n    },\r\n\r\n    showToolbar: function () {\r\n        clearTimeout(this.hideTimeout);\r\n        if (!this.isDisplayed()) {\r\n            this.getToolbarElement().classList.add('medium-editor-toolbar-active');\r\n            this.trigger('showToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideToolbar: function () {\r\n        if (this.isDisplayed()) {\r\n            this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\r\n            this.trigger('hideToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarDisplayed: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-active');\r\n    },\r\n\r\n    showInsertbar: function () {\r\n        if (!this.isInsertbarDisplayed() && this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions').childNodes.length) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-active');\r\n            this.trigger('showInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideInsertbar: function () {\r\n        if (this.isInsertbarDisplayed()) {\r\n            this.collapseInsertbar();\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-active');\r\n            this.trigger('hideInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarExpanded: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-expand');\r\n    },\r\n\r\n    expandInsertbar: function () {\r\n        if (!this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-expand');\r\n            this.trigger('expandInsertbar');\r\n        }\r\n    },\r\n\r\n    collapseInsertbar: function() {\r\n        if (this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-expand');\r\n            this.trigger('collapseInsertbar');\r\n        }\r\n    },\r\n\r\n    isToolbarDefaultActionsDisplayed: function () {\r\n        return this.getToolbarActionsElement().style.display === 'block';\r\n    },\r\n\r\n    hideToolbarDefaultActions: function () {\r\n        if (this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'none';\r\n        }\r\n    },\r\n\r\n    showToolbarDefaultActions: function () {\r\n        this.hideExtensionForms();\r\n\r\n        if (!this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'block';\r\n        }\r\n\r\n        // Using setTimeout + options.delay because:\r\n        // We will actually be displaying the toolbar, which should be controlled by options.delay\r\n        this.delayShowTimeout = this.base.delay(function () {\r\n            this.showToolbar();\r\n        }.bind(this));\r\n    },\r\n\r\n    hideExtensionForms: function () {\r\n        // Hide all extension forms\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm && extension.isDisplayed()) {\r\n                extension.hideForm();\r\n            }\r\n        });\r\n    },\r\n\r\n    // Responding to changes in user selection\r\n\r\n    // Checks for existance of multiple block elements in the current selection\r\n    multipleBlockElementsSelected: function () {\r\n        var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\r\n            regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\r\n            selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\r\n            hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\r\n\r\n        return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\r\n    },\r\n\r\n    modifySelection: function () {\r\n        var selection = this.window.getSelection(),\r\n            selectionRange = selection.getRangeAt(0);\r\n\r\n        /*\r\n        * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\r\n        * will be at the very end of an element.  In other browsers, the selectionRange start\r\n        * would instead be at the very beginning of an element that actually has content.\r\n        * example:\r\n        *   <span>foo</span><span>bar</span>\r\n        *\r\n        * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\r\n        * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\r\n        * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\r\n        * properties on the 'bar' span, they won't be reflected accurately in the toolbar\r\n        * (ie 'Bold' button wouldn't be active)\r\n        *\r\n        * So, for cases where the selectionRange start is at the end of an element/node, find the next\r\n        * adjacent text node that actually has content in it, and move the selectionRange start there.\r\n        */\r\n        if (this.standardizeSelectionStart &&\r\n                selectionRange.startContainer.nodeValue &&\r\n                (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\r\n            var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\r\n            if (adjacentNode) {\r\n                var offset = 0;\r\n                while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\r\n                    offset = offset + 1;\r\n                }\r\n                selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\r\n                    selectionRange.endContainer, selectionRange.endOffset);\r\n            }\r\n        }\r\n    },\r\n\r\n    checkState: function () {\r\n        if (this.base.preventSelectionUpdates) {\r\n            return;\r\n        }\r\n\r\n        // If no editable has focus OR selection is inside contenteditable = false\r\n        // hide toolbar\r\n        if (!this.base.getFocusedElement() ||\r\n                MediumEditor.selection.selectionInContentEditableFalse(this.window)) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // If there's no selection element, selection element doesn't belong to this editor\r\n        // or toolbar is disabled for this selection element\r\n        // hide toolbar\r\n        var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\r\n        if (!selectionElement ||\r\n                this.getEditorElements().indexOf(selectionElement) === -1 ||\r\n                selectionElement.getAttribute('data-disable-toolbar')) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // Now we know there's a focused editable with a selection\r\n\r\n        if (this.document.getSelection().isCollapsed && /^(\\s+|<br\\/?>)?$/i.test(MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document)).innerHTML)) {\r\n            this.showAndUpdateInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n\r\n        // If the updateOnEmptySelection option is true, show the toolbar\r\n        if (this.updateOnEmptySelection && this.static) {\r\n            return this.showAndUpdateToolbar();\r\n        }\r\n\r\n        // If we don't have a 'valid' selection -> hide toolbar\r\n        if (!MediumEditor.selection.selectionContainsContent(this.document) ||\r\n            (this.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected())) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        this.showAndUpdateToolbar();\r\n    },\r\n\r\n    // Updating the toolbar\r\n\r\n    showAndUpdateToolbar: function () {\r\n        this.modifySelection();\r\n        this.setToolbarButtonStates();\r\n        this.trigger('positionToolbar', {}, this.base.getFocusedElement());\r\n        this.showToolbarDefaultActions();\r\n        this.setToolbarPosition();\r\n    },\r\n\r\n    showAndUpdateInsertbar: function () {\r\n        this.collapseInsertbar();\r\n        this.trigger('positionInsertbar', {}, this.base.getFocusedElement());\r\n        this.setInsertbarPosition();\r\n    },\r\n\r\n    setToolbarButtonStates: function () {\r\n        this.forEachExtension(function (extension) {\r\n            if (typeof extension.isActive === 'function' &&\r\n                typeof extension.setInactive === 'function') {\r\n                extension.setInactive();\r\n            }\r\n        });\r\n\r\n        this.checkActiveButtons();\r\n    },\r\n\r\n    checkActiveButtons: function () {\r\n        var manualStateChecks = [],\r\n            queryState = null,\r\n            selectionRange = MediumEditor.selection.getSelectionRange(this.document),\r\n            parentNode,\r\n            updateExtensionState = function (extension) {\r\n                if (typeof extension.checkState === 'function') {\r\n                    extension.checkState(parentNode);\r\n                } else if (typeof extension.isActive === 'function' &&\r\n                           typeof extension.isAlreadyApplied === 'function' &&\r\n                           typeof extension.setActive === 'function') {\r\n                    if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\r\n                        extension.setActive();\r\n                    }\r\n                }\r\n            };\r\n\r\n        if (!selectionRange) {\r\n            return;\r\n        }\r\n\r\n        // Loop through all extensions\r\n        this.forEachExtension(function (extension) {\r\n            // For those extensions where we can use document.queryCommandState(), do so\r\n            if (typeof extension.queryCommandState === 'function') {\r\n                queryState = extension.queryCommandState();\r\n                // If queryCommandState returns a valid value, we can trust the browser\r\n                // and don't need to do our manual checks\r\n                if (queryState !== null) {\r\n                    if (queryState && typeof extension.setActive === 'function') {\r\n                        extension.setActive();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            // We can't use queryCommandState for this extension, so add to manualStateChecks\r\n            manualStateChecks.push(extension);\r\n        });\r\n\r\n        parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\r\n\r\n        // Make sure the selection parent isn't outside of the contenteditable\r\n        if (!this.getEditorElements().some(function (element) {\r\n                return MediumEditor.util.isDescendant(element, parentNode, true);\r\n            })) {\r\n            return;\r\n        }\r\n\r\n        // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\r\n        while (parentNode) {\r\n            manualStateChecks.forEach(updateExtensionState);\r\n\r\n            // we can abort the search upwards if we leave the contentEditable element\r\n            if (MediumEditor.util.isMediumEditorElement(parentNode)) {\r\n                break;\r\n            }\r\n            parentNode = parentNode.parentNode;\r\n        }\r\n    },\r\n\r\n    // Positioning toolbar\r\n\r\n    positionToolbarIfShown: function () {\r\n        if (this.isDisplayed()) {\r\n            this.setToolbarPosition();\r\n        }\r\n    },\r\n\r\n    setToolbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        // If there isn't a valid selection, bail\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        if (this.static || !selection.isCollapsed) {\r\n            // we don't need any absolute positioning if relativeContainer is set\r\n            if (!this.relativeContainer) {\r\n                if (this.static) {\r\n                    this.positionStaticToolbar(container);\r\n                } else {\r\n                    this.positionToolbar(selection);\r\n                }\r\n            }\r\n\r\n            this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showToolbar();\r\n        }\r\n    },\r\n\r\n    setInsertbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n\r\n        if (selection.isCollapsed && topBlockContainer.textContent == '') {\r\n            var rect = topBlockContainer.getBoundingClientRect();\r\n\r\n            this.getInsertbarElement().style.top = (rect.top + this.window.pageYOffset) + 'px';\r\n            this.getInsertbarElement().style.left = Math.max(rect.left + this.window.pageXOffset + this.insertDiffLeft, 0) + 'px';\r\n            this.trigger('positionedInsertbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n    },\r\n\r\n    positionStaticToolbar: function (container) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n\r\n        // document.documentElement for IE 9\r\n        var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\r\n            windowWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            containerRect = container.getBoundingClientRect(),\r\n            containerTop = containerRect.top + scrollTop,\r\n            containerCenter = (containerRect.left + (containerRect.width / 2)),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            targetLeft;\r\n\r\n        if (this.sticky) {\r\n            // If it's beyond the height of the editor, position it at the bottom of the editor\r\n            if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n            // Stick the toolbar to the top of the window\r\n            } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.classList.add('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = this.stickyTopOffset + 'px';\r\n            // Normal static toolbar position\r\n            } else {\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n            }\r\n        } else {\r\n            toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n        }\r\n\r\n        switch (this.align) {\r\n            case 'left':\r\n                targetLeft = containerRect.left;\r\n                break;\r\n\r\n            case 'right':\r\n                targetLeft = containerRect.right - toolbarWidth;\r\n                break;\r\n\r\n            case 'center':\r\n                targetLeft = containerCenter - halfOffsetWidth;\r\n                break;\r\n        }\r\n\r\n        if (targetLeft < 0) {\r\n            targetLeft = 0;\r\n        } else if ((targetLeft + toolbarWidth) > windowWidth) {\r\n            targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\r\n        }\r\n\r\n        toolbarElement.style.left = targetLeft + 'px';\r\n    },\r\n\r\n    positionToolbar: function (selection) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n        this.getToolbarElement().style.right = 'initial';\r\n\r\n        var range = selection.getRangeAt(0),\r\n            boundary = range.getBoundingClientRect();\r\n\r\n        // Handle selections with just images\r\n        if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\r\n            // If there's a nested image, use that for the bounding rectangle\r\n            if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\r\n                boundary = range.startContainer.querySelector('img').getBoundingClientRect();\r\n            } else {\r\n                boundary = range.startContainer.getBoundingClientRect();\r\n            }\r\n        }\r\n\r\n        var containerWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            buttonHeight = 50,\r\n            defaultLeft = this.diffLeft - halfOffsetWidth,\r\n            elementsContainer = this.getEditorOption('elementsContainer'),\r\n            elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\r\n            positions = {},\r\n            relativeBoundary = {},\r\n            middleBoundary, elementsContainerBoundary;\r\n\r\n        // If container element is absolute / fixed, recalculate boundaries to be relative to the container\r\n        if (elementsContainerAbsolute) {\r\n            elementsContainerBoundary = elementsContainer.getBoundingClientRect();\r\n            ['top', 'left'].forEach(function (key) {\r\n                relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\r\n            });\r\n\r\n            relativeBoundary.width = boundary.width;\r\n            relativeBoundary.height = boundary.height;\r\n            boundary = relativeBoundary;\r\n\r\n            containerWidth = elementsContainerBoundary.width;\r\n\r\n            // Adjust top position according to container scroll position\r\n            positions.top = elementsContainer.scrollTop;\r\n        } else {\r\n            // Adjust top position according to window scroll position\r\n            positions.top = this.window.pageYOffset;\r\n        }\r\n\r\n        middleBoundary = boundary.left + boundary.width / 2;\r\n        positions.top += boundary.top - toolbarHeight;\r\n\r\n        if (boundary.top < buttonHeight) {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-over');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-under');\r\n            positions.top += buttonHeight + boundary.height - this.diffTop;\r\n        } else {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-under');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-over');\r\n            positions.top += this.diffTop;\r\n        }\r\n\r\n        if (middleBoundary < halfOffsetWidth) {\r\n            positions.left = defaultLeft + halfOffsetWidth;\r\n            positions.right = 'initial';\r\n        } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\r\n            positions.left = 'auto';\r\n            positions.right = 0;\r\n        } else {\r\n            positions.left = defaultLeft + middleBoundary;\r\n            positions.right = 'initial';\r\n        }\r\n\r\n        ['top', 'left', 'right'].forEach(function (key) {\r\n            toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\r\n        });\r\n    }\r\n});\r\n","dmx.mediumEditor.states = {\r\n    'headers': {\r\n        buttons: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n        checkState: function(node) {\r\n            return ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(node.nodeName) != -1;\r\n        }\r\n    }\r\n};\r\n\r\ndmx.mediumEditor.Extension('toolbar-states', {\r\n\r\n    pendingState: null,\r\n\r\n    currentState: null,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('positionToolbar', this.onPositionToolbar.bind(this));\r\n    },\r\n\r\n    checkState: function(node) {\r\n        if (!this.pendingState) {\r\n            Object.keys(dmx.mediumEditor.states).forEach(function(name) {\r\n                var state = dmx.mediumEditor.states[name];\r\n                if (state.checkState(node)) {\r\n                    this.pendingState = state;\r\n                }\r\n            }, this);\r\n        }\r\n\r\n        if (MediumEditor.util.isMediumEditorElement(node)) {\r\n            this.currentState = this.pendingState;\r\n            this.pendingState = null;\r\n        }\r\n    },\r\n\r\n    onPositionToolbar: function() {\r\n        var firstButton, lastButton;\r\n        var toolbar = this.base.getExtensionByName('toolbar');\r\n        var state = this.currentState || { buttons: toolbar.buttons };\r\n\r\n        toolbar.forEachExtension(function(extension) {\r\n            if (typeof extension.getButton == 'function') {\r\n                var button = extension.getButton();\r\n\r\n                if (state.buttons.indexOf(extension.name) != -1) {\r\n                    button.style.removeProperty('display');\r\n                    firstButton = firstButton || button;\r\n                    lastButton = button;\r\n                } else {\r\n                    button.style.setProperty('display', 'none');\r\n                }\r\n\r\n                button.classList.remove(toolbar.firstButtonClass);\r\n                button.classList.remove(toolbar.lastButtonClass);\r\n            }\r\n        });\r\n\r\n        if (firstButton && lastButton) {\r\n            firstButton.classList.add(toolbar.firstButtonClass);\r\n            lastButton.classList.add(toolbar.lastButtonClass);\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('auto-list', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('editableKeypress', this.onKeypress.bind(this));\r\n    },\r\n\r\n    onKeypress: function (keyPressEvent) {\r\n        if (MediumEditor.util.isKey(keyPressEvent, [MediumEditor.util.keyCode.SPACE])) {\r\n            var list_start = this.base.getSelectedParentElement().textContent;\r\n\r\n            if (list_start == '1.' || list_start == '*') {\r\n                this.base.execAction(list_start == '*' ? 'insertunorderedlist' : 'insertorderedlist');\r\n                this.base.getSelectedParentElement().textContent = '';\r\n                keyPressEvent.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n"]}