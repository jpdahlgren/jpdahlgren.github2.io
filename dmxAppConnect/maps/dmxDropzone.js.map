{"version":3,"sources":["components/dropzone.js"],"names":["dmx","Component","extends","initialData","files","attributes","accept","type","String","default","render","node","this","form","$node","dmxExtraData","dropzone","document","createElement","className","innerHTML","addEventListener","dragover","bind","dragenter","dragleave","drop","dom","replace","console","warn","event","preventDefault","stopPropagation","ea","dataTransfer","effectAllowed","e","dropEffect","classList","add","remove","length","items","webkitGetAsEntry","addFilesFromItems","addFiles","validate","file","props","split","some","charAt","name","match","RegExp","test","toLowerCase","addFile","info","multiple","push","date","lastModified","Date","lastModifiedDate","toISOString","size","dataUrl","indexOf","reader","FileReader","onload","target","result","requestUpdate","readAsDataURL","set","data","concat","array","forEach","item","entry","isFile","getAsFile","isDirectory","addFilesFromDirectory","kind","directory","path","createReader","readEntries","entries","fullPath","error"],"mappings":"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","file":"../dmxDropzone/dmxDropzone.js","sourcesContent":["dmx.Component('dropzone', {\r\n\r\n    extends: 'input',\r\n\r\n    initialData: {\r\n        files: []\r\n    },\r\n\r\n    attributes: {\r\n        accept: {\r\n            type: String,\r\n            default: ''\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.form = this.$node.form;\r\n\r\n        if (!this.form.dmxExtraData) {\r\n            console.warn('Filedrop can only work on a serverconnect form!');\r\n            return;\r\n        }\r\n\r\n        this.dropzone = document.createElement('div');\r\n        this.dropzone.className = 'dmxDropzone';\r\n        this.dropzone.innerHTML = '<div class=\"dmxDropzoneEmpty\">Drop your files here...</div>';\r\n\r\n        this.dropzone.addEventListener('dragover', this.dragover.bind(this));\r\n        this.dropzone.addEventListener('dragenter', this.dragenter.bind(this));\r\n        this.dropzone.addEventListener('dragleave', this.dragleave.bind(this));\r\n        this.dropzone.addEventListener('drop', this.drop.bind(this));\r\n\r\n        dmx.dom.replace(this.$node, this.dropzone);\r\n    },\r\n\r\n    dragover: function(event) {\r\n        // prevent default to allow drop\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var ea;\r\n        try { ea = event.dataTransfer.effectAllowed; } catch(e) {}\r\n\r\n        event.dataTransfer.dropEffect = (ea == 'move' || ea == 'linkMove') ? 'move' : 'copy';\r\n    },\r\n\r\n    dragenter: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.dropzone.classList.add('dmxDropzoneHover');\r\n    },\r\n\r\n    dragleave: function(event) {\r\n        this.dropzone.classList.remove('dmxDropzoneHover');\r\n    },\r\n\r\n    drop: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.dropzone.classList.remove('dmxDropzoneHover');\r\n\r\n        if (!event.dataTransfer) return;\r\n\r\n        var files = event.dataTransfer.files;\r\n\r\n        if (files.length) {\r\n            var items = event.dataTransfer.items;\r\n\r\n            if (items && items.length && items[0].webkitGetAsEntry) {\r\n                this.addFilesFromItems(items);\r\n            } else {\r\n                this.addFiles(files);\r\n            }\r\n        }\r\n    },\r\n\r\n    validate: function(file) {\r\n        return this.props.accept.split(/\\s*,\\s*/g).some(function(type) {\r\n            if (type.charAt(0) == '.') {\r\n                if (file.name.match(new RegExp('\\\\' + type + '$', 'i'))) {\r\n                    return true;\r\n                }\r\n            } else if (/(audio|video|image)\\/\\*/i.test(type)) {\r\n                if (file.type.match(new RegExp('^' + type.replace(/\\*/g, '.*') + '$', 'i'))) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (file.type.toLowerCase() == type.toLowerCase()) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    },\r\n\r\n    addFile: function(file) {\r\n        if (!this.validate(file)) {\r\n            console.info('Skipping ' + file.name + ', file not valid!');\r\n            return;\r\n        }\r\n\r\n        if (this.$node.multiple) {\r\n            this.form.dmxExtraData[this.$node.name] = this.form.dmxExtraData[this.$node.name] || [];\r\n            this.form.dmxExtraData[this.$node.name].push(file);\r\n        } else {\r\n            this.form.dmxExtraData[this.$node.name] = file;\r\n        }\r\n\r\n        var info = {\r\n            date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n            name: file.name,\r\n            size: file.size,\r\n            type: file.type,\r\n            dataUrl: null\r\n        };\r\n\r\n        if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n            file.reader = new FileReader();\r\n\r\n            file.reader.onload = function(event) {\r\n                info.dataUrl = event.target.result;\r\n                dmx.requestUpdate();\r\n            }.bind(this);\r\n\r\n            file.reader.readAsDataURL(file);\r\n        }\r\n\r\n        this.set('files', this.data.files.concat([info]));\r\n    },\r\n\r\n    addFiles: function(files) {\r\n        dmx.array(files).forEach(function(file) {\r\n            this.addFile(file);\r\n        }, this);\r\n    },\r\n\r\n    addFilesFromItems: function(items) {\r\n        dmx.array(items).forEach(function(item) {\r\n            var entry;\r\n            if (item.webkitGetAsEntry && (entry = item.webkitGetAsEntry())) {\r\n                if (entry.isFile) {\r\n                    this.addFile(item.getAsFile());\r\n                } else if (entry.isDirectory) {\r\n                    this.addFilesFromDirectory(entry);\r\n                }\r\n            } else if (item.getAsFile) {\r\n                if (!item.kind || item.kind == 'file') {\r\n                    this.addFile(item.getAsFile());\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    addFilesFromDirectory: function(directory, path) {\r\n        var reader = directory.createReader();\r\n        var readEntries = function() {\r\n            reader.readEntries(function(entries) {\r\n                if (entries.length) {\r\n                    entries.forEach(function(entry) {\r\n                        if (entry.isFile) {\r\n                            entry.file(function(file) {\r\n                                file.fullPath = path + '/' + file.name;\r\n                                this.addFile(file);\r\n                            }.bind(this));\r\n                        } else if (entry.isDirectory) {\r\n                            this.addFilesFromDirectory(entry, path + '/' + entry.name);\r\n                        }\r\n                    }, this);\r\n                }\r\n\r\n                readEntries();\r\n            }.bind(this), function(error) {\r\n                console.warn(error);\r\n            }.bind(this));\r\n        }.bind(this);\r\n\r\n        readEntries();\r\n    }\r\n\r\n});\r\n"]}